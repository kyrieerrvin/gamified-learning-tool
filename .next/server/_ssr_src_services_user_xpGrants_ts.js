"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_services_user_xpGrants_ts";
exports.ids = ["_ssr_src_services_user_xpGrants_ts"];
exports.modules = {

/***/ "(ssr)/./src/services/user/xpGrants.ts":
/*!***************************************!*\
  !*** ./src/services/user/xpGrants.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDedupeKey: () => (/* binding */ buildDedupeKey),\n/* harmony export */   createXpGrant: () => (/* binding */ createXpGrant),\n/* harmony export */   flushQueuedGrants: () => (/* binding */ flushQueuedGrants),\n/* harmony export */   getLocalDateKey: () => (/* binding */ getLocalDateKey),\n/* harmony export */   subscribeToXp: () => (/* binding */ subscribeToXp)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase */ \"(ssr)/./src/lib/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(ssr)/./node_modules/firebase/firestore/dist/index.mjs\");\n// src/services/user/xpGrants.ts\n/* __next_internal_client_entry_do_not_use__ getLocalDateKey,flushQueuedGrants,createXpGrant,buildDedupeKey,subscribeToXp auto */ \n\nconst getUserIdOrThrow = ()=>{\n    const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n    if (!user) throw new Error('[XP] No authenticated user');\n    return user.uid;\n};\nconst getLocalDateKey = ()=>{\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n};\n// Simple offline queue using localStorage\nconst QUEUE_KEY = 'xpGrantQueue';\nconst readQueue = ()=>{\n    try {\n        const raw = localStorage.getItem(QUEUE_KEY);\n        return raw ? JSON.parse(raw) : [];\n    } catch  {\n        return [];\n    }\n};\nconst writeQueue = (items)=>{\n    try {\n        localStorage.setItem(QUEUE_KEY, JSON.stringify(items));\n    } catch  {}\n};\nconst enqueueGrant = (grant)=>{\n    const q = readQueue();\n    q.push(grant);\n    writeQueue(q);\n};\nconst flushQueuedGrants = async ()=>{\n    const items = readQueue();\n    if (!items.length) return;\n    const remaining = [];\n    for (const grant of items){\n        try {\n            await createXpGrant(grant, {\n                skipOfflineQueue: true\n            });\n            console.log('[XP] Flushed queued grant', grant.dedupeKey);\n        } catch (e) {\n            console.warn('[XP] Failed to flush queued grant, keeping in queue', grant.dedupeKey, e);\n            remaining.push(grant);\n        }\n    }\n    writeQueue(remaining);\n};\nif (false) {}\nconst createXpGrant = async (partial, options = {})=>{\n    const userId = getUserIdOrThrow();\n    const localDateKey = partial.localDateKey || getLocalDateKey();\n    const dedupeKey = partial.dedupeKey || buildDedupeKey(userId, partial.sourceType, partial.sourceId, localDateKey);\n    const grant = {\n        userId,\n        sourceType: partial.sourceType,\n        sourceId: partial.sourceId,\n        amount: Math.max(0, Math.floor(partial.amount || 0)),\n        localDateKey,\n        dedupeKey,\n        createdAt: new Date().toISOString()\n    };\n    if (grant.amount <= 0) throw new Error('[XP] Invalid grant amount');\n    const col = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'gameProgress', userId, 'xpGrants');\n    const ref = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(col, dedupeKey);\n    try {\n        const result = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.runTransaction)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, async (tx)=>{\n            const snap = await tx.get(ref);\n            if (snap.exists()) {\n                return {\n                    created: false\n                };\n            }\n            tx.set(ref, grant);\n            return {\n                created: true\n            };\n        });\n        console.log('[XP] Grant persisted', {\n            dedupeKey,\n            sourceType: grant.sourceType,\n            amount: grant.amount\n        });\n        return {\n            created: result.created,\n            id: dedupeKey\n        };\n    } catch (err) {\n        // Offline or other error: optionally queue\n        if (!options.skipOfflineQueue && typeof navigator !== 'undefined' && !navigator.onLine) {\n            enqueueGrant(grant);\n            console.warn('[XP] Offline, queued grant', dedupeKey);\n            throw new Error('[XP] Queued (offline)');\n        }\n        throw err;\n    }\n};\nconst buildDedupeKey = (userId, sourceType, sourceId, localDateKey)=>{\n    // Quests should be idempotent per day, levels should be idempotent forever\n    if (sourceType === 'quest') {\n        return `${userId}:quest:${sourceId}:${localDateKey || getLocalDateKey()}`;\n    }\n    return `${userId}:level:${sourceId}`;\n};\nconst subscribeToXp = (onChange)=>{\n    const userId = getUserIdOrThrow();\n    const col = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'gameProgress', userId, 'xpGrants');\n    const qAll = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(col, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)('createdAt', 'desc'));\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(qAll, (snap)=>{\n        let lifetimeTotal = 0;\n        let todayQuestTotal = 0;\n        const todayKey = getLocalDateKey();\n        const grants = [];\n        snap.forEach((d)=>{\n            const data = d.data();\n            const rec = {\n                userId: data.userId,\n                sourceType: data.sourceType,\n                sourceId: data.sourceId,\n                amount: data.amount,\n                localDateKey: data.localDateKey,\n                dedupeKey: data.dedupeKey || d.id,\n                createdAt: data.createdAt\n            };\n            grants.push(rec);\n            lifetimeTotal += rec.amount;\n            if (rec.sourceType === 'quest' && rec.localDateKey === todayKey) {\n                todayQuestTotal += rec.amount;\n            }\n        });\n        onChange({\n            lifetimeTotal,\n            todayQuestTotal,\n            grants\n        });\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/services/user/xpGrants.ts\n");

/***/ })

};
;