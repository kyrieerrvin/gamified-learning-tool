"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_services_user_xpGrants_ts"],{

/***/ "(app-pages-browser)/./src/services/user/xpGrants.ts":
/*!***************************************!*\
  !*** ./src/services/user/xpGrants.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDedupeKey: () => (/* binding */ buildDedupeKey),\n/* harmony export */   createXpGrant: () => (/* binding */ createXpGrant),\n/* harmony export */   flushQueuedGrants: () => (/* binding */ flushQueuedGrants),\n/* harmony export */   getLocalDateKey: () => (/* binding */ getLocalDateKey),\n/* harmony export */   subscribeToXp: () => (/* binding */ subscribeToXp)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n// src/services/user/xpGrants.ts\n/* __next_internal_client_entry_do_not_use__ getLocalDateKey,flushQueuedGrants,createXpGrant,buildDedupeKey,subscribeToXp auto */ \n\nconst getUserIdOrThrow = ()=>{\n    const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n    if (!user) throw new Error('[XP] No authenticated user');\n    return user.uid;\n};\nconst getLocalDateKey = ()=>{\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n};\n// Simple offline queue using localStorage\nconst QUEUE_KEY = 'xpGrantQueue';\nconst readQueue = ()=>{\n    try {\n        const raw = localStorage.getItem(QUEUE_KEY);\n        return raw ? JSON.parse(raw) : [];\n    } catch (e) {\n        return [];\n    }\n};\nconst writeQueue = (items)=>{\n    try {\n        localStorage.setItem(QUEUE_KEY, JSON.stringify(items));\n    } catch (e) {}\n};\nconst enqueueGrant = (grant)=>{\n    const q = readQueue();\n    q.push(grant);\n    writeQueue(q);\n};\nconst flushQueuedGrants = async ()=>{\n    const items = readQueue();\n    if (!items.length) return;\n    const remaining = [];\n    for (const grant of items){\n        try {\n            await createXpGrant(grant, {\n                skipOfflineQueue: true\n            });\n            console.log('[XP] Flushed queued grant', grant.dedupeKey);\n        } catch (e) {\n            console.warn('[XP] Failed to flush queued grant, keeping in queue', grant.dedupeKey, e);\n            remaining.push(grant);\n        }\n    }\n    writeQueue(remaining);\n};\nif (true) {\n    window.addEventListener('online', ()=>{\n        flushQueuedGrants();\n    });\n}\nconst createXpGrant = async function(partial) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const userId = getUserIdOrThrow();\n    const localDateKey = partial.localDateKey || getLocalDateKey();\n    const dedupeKey = partial.dedupeKey || buildDedupeKey(userId, partial.sourceType, partial.sourceId, localDateKey);\n    const grant = {\n        userId,\n        sourceType: partial.sourceType,\n        sourceId: partial.sourceId,\n        amount: Math.max(0, Math.floor(partial.amount || 0)),\n        localDateKey,\n        dedupeKey,\n        createdAt: new Date().toISOString()\n    };\n    if (grant.amount <= 0) throw new Error('[XP] Invalid grant amount');\n    const col = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'gameProgress', userId, 'xpGrants');\n    const ref = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(col, dedupeKey);\n    try {\n        const result = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.runTransaction)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, async (tx)=>{\n            const snap = await tx.get(ref);\n            if (snap.exists()) {\n                return {\n                    created: false\n                };\n            }\n            tx.set(ref, grant);\n            return {\n                created: true\n            };\n        });\n        console.log('[XP] Grant persisted', {\n            dedupeKey,\n            sourceType: grant.sourceType,\n            amount: grant.amount\n        });\n        return {\n            created: result.created,\n            id: dedupeKey\n        };\n    } catch (err) {\n        // Offline or other error: optionally queue\n        if (!options.skipOfflineQueue && typeof navigator !== 'undefined' && !navigator.onLine) {\n            enqueueGrant(grant);\n            console.warn('[XP] Offline, queued grant', dedupeKey);\n            throw new Error('[XP] Queued (offline)');\n        }\n        throw err;\n    }\n};\nconst buildDedupeKey = (userId, sourceType, sourceId, localDateKey)=>{\n    // Quests should be idempotent per day, levels should be idempotent forever\n    if (sourceType === 'quest') {\n        return \"\".concat(userId, \":quest:\").concat(sourceId, \":\").concat(localDateKey || getLocalDateKey());\n    }\n    return \"\".concat(userId, \":level:\").concat(sourceId);\n};\nconst subscribeToXp = (onChange)=>{\n    const userId = getUserIdOrThrow();\n    const col = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'gameProgress', userId, 'xpGrants');\n    const qAll = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(col, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)('createdAt', 'desc'));\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(qAll, (snap)=>{\n        let lifetimeTotal = 0;\n        let todayQuestTotal = 0;\n        const todayKey = getLocalDateKey();\n        const grants = [];\n        snap.forEach((d)=>{\n            const data = d.data();\n            const rec = {\n                userId: data.userId,\n                sourceType: data.sourceType,\n                sourceId: data.sourceId,\n                amount: data.amount,\n                localDateKey: data.localDateKey,\n                dedupeKey: data.dedupeKey || d.id,\n                createdAt: data.createdAt\n            };\n            grants.push(rec);\n            lifetimeTotal += rec.amount;\n            if (rec.sourceType === 'quest' && rec.localDateKey === todayKey) {\n                todayQuestTotal += rec.amount;\n            }\n        });\n        onChange({\n            lifetimeTotal,\n            todayQuestTotal,\n            grants\n        });\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/user/xpGrants.ts\n"));

/***/ })

}]);