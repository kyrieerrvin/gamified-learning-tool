"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/challenges/multiple-choice/play/page",{

/***/ "(app-pages-browser)/./src/app/challenges/multiple-choice/play/page.tsx":
/*!**********************************************************!*\
  !*** ./src/app/challenges/multiple-choice/play/page.tsx ***!
  \**********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlayMultipleChoicePage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js\");\n/* harmony import */ var _hooks_useGameProgress__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/hooks/useGameProgress */ \"(app-pages-browser)/./src/hooks/useGameProgress.ts\");\n/* harmony import */ var _components_ui_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ui/Button */ \"(app-pages-browser)/./src/components/ui/Button.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n// Dynamically import the game component to avoid module not found errors\nconst PartsOfSpeechGame = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_challenges_multiple-choice_PartsOfSpeechGame_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/challenges/multiple-choice/PartsOfSpeechGame */ \"(app-pages-browser)/./src/components/challenges/multiple-choice/PartsOfSpeechGame.tsx\")), {\n    loadableGenerated: {\n        modules: [\n            \"app/challenges/multiple-choice/play/page.tsx -> \" + \"@/components/challenges/multiple-choice/PartsOfSpeechGame\"\n        ]\n    },\n    loading: ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-[400px] flex items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-duolingo-purple\"\n            }, void 0, false, {\n                fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                lineNumber: 15,\n                columnNumber: 7\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n            lineNumber: 14,\n            columnNumber: 20\n        }, undefined),\n    ssr: false // Disable server-side rendering for this component\n});\n_c = PartsOfSpeechGame;\nfunction PlayMultipleChoicePage() {\n    _s();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams)();\n    const sectionId = parseInt(searchParams.get('section') || '0'); // Level group index (0: Easy, 1: Difficult, 2: Hard)\n    const levelId = parseInt(searchParams.get('level') || '0'); // Challenge index within the level (0..9)\n    const { progress, canAccessLevel, completeLevel, updateData, data, loading: gameProgressLoading } = (0,_hooks_useGameProgress__WEBPACK_IMPORTED_MODULE_4__.useGameProgress)();\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [score, setScore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [gameCompleted, setGameCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [progressCompleted, setProgressCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [nextSection, setNextSection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [nextLevel, setNextLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const prefersReduced = (0,framer_motion__WEBPACK_IMPORTED_MODULE_6__.useReducedMotion)();\n    // Check if level is accessible AFTER game progress has loaded\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PlayMultipleChoicePage.useEffect\": ()=>{\n            if (gameProgressLoading || !data) {\n                setLoading(true);\n                return;\n            }\n            const hasAccess = canAccessLevel('multiple-choice', sectionId, levelId);\n            if (!hasAccess) {\n                router.push('/challenges/multiple-choice');\n                return;\n            }\n            setLoading(false);\n        }\n    }[\"PlayMultipleChoicePage.useEffect\"], [\n        sectionId,\n        levelId,\n        canAccessLevel,\n        router,\n        gameProgressLoading,\n        data\n    ]);\n    // Reset completion and local navigation state when URL params change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PlayMultipleChoicePage.useEffect\": ()=>{\n            setGameCompleted(false);\n            setScore(0);\n            setProgressCompleted(0);\n            setNextSection(null);\n            setNextLevel(null);\n        }\n    }[\"PlayMultipleChoicePage.useEffect\"], [\n        sectionId,\n        levelId\n    ]);\n    // Handle quest progress updates\n    const updateQuestProgress = async (questId, progressAmount)=>{\n        var _data_progress_multiplechoice;\n        if (!(data === null || data === void 0 ? void 0 : (_data_progress_multiplechoice = data.progress['multiple-choice']) === null || _data_progress_multiplechoice === void 0 ? void 0 : _data_progress_multiplechoice.quests)) return;\n        const quests = [\n            ...data.progress['multiple-choice'].quests\n        ];\n        const quest = quests.find((q)=>q.id === questId);\n        if (quest && !quest.isCompleted) {\n            quest.progress = Math.min(quest.progress + progressAmount, quest.target);\n            if (quest.progress >= quest.target) {\n                quest.isCompleted = true;\n            }\n            await updateData({\n                progress: {\n                    ...data.progress,\n                    'multiple-choice': {\n                        ...data.progress['multiple-choice'],\n                        quests\n                    }\n                }\n            });\n        }\n    };\n    // Handle game completion\n    const handleComplete = async (score, levelCompleted)=>{\n        setScore(score);\n        setGameCompleted(true);\n        // Complete level with the score to determine if next level should unlock\n        await completeLevel('multiple-choice', sectionId, levelId, score);\n        // Update perfect score quest only if perfect\n        if (score === 100) {\n            await updateQuestProgress('perfect-score', 1);\n        }\n        // Always update complete-games quest - any completed game counts\n        await updateQuestProgress('complete-games', 1);\n        // Add additional debug log for XP tracking\n        console.log(\"[XP Debug - MultipleChoice] Score: \".concat(score, \", Level: \").concat(levelId, \", Section: \").concat(sectionId));\n        // Pre-compute the next level locally to avoid relying on async store propagation\n        if (score >= 80) {\n            let ns = sectionId;\n            let nl = levelId;\n            if (levelId < 9) {\n                nl = levelId + 1;\n            } else if (sectionId < 2) {\n                ns = sectionId + 1;\n                nl = 0;\n            } else {\n                // No next level (finished last level). Keep nulls to hide the button.\n                ns = -1;\n                nl = -1;\n            }\n            setNextSection(ns >= 0 ? ns : null);\n            setNextLevel(nl >= 0 ? nl : null);\n        } else {\n            setNextSection(null);\n            setNextLevel(null);\n        }\n    };\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen flex flex-col items-center justify-center bg-gray-50\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-duolingo-purple\"\n                }, void 0, false, {\n                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                    lineNumber: 130,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"mt-4 text-gray-600\",\n                    children: \"Naglo-load...\"\n                }, void 0, false, {\n                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                    lineNumber: 131,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n            lineNumber: 129,\n            columnNumber: 7\n        }, this);\n    }\n    if (gameCompleted) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen flex flex-col items-center justify-center bg-gray-50\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                initial: {\n                    scale: 0.9,\n                    opacity: 0\n                },\n                animate: {\n                    scale: 1,\n                    opacity: 1\n                },\n                transition: {\n                    type: \"spring\",\n                    bounce: 0.5\n                },\n                className: \"bg-white rounded-xl shadow-lg p-8 max-w-md mx-auto text-center\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mb-6\",\n                    children: [\n                        score >= 80 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mx-auto w-24 h-24 bg-duolingo-blue rounded-full flex items-center justify-center mb-4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"h-12 w-12 text-white\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M5 13l4 4L19 7\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 149,\n                                    columnNumber: 19\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                lineNumber: 148,\n                                columnNumber: 17\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 147,\n                            columnNumber: 15\n                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mx-auto w-24 h-24 bg-duolingo-blue rounded-full flex items-center justify-center mb-4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"h-12 w-12 text-white\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 155,\n                                    columnNumber: 19\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                lineNumber: 154,\n                                columnNumber: 17\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 153,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-2xl font-bold mb-2\",\n                            children: score >= 80 ? 'Mahusay!' : 'Magaling!'\n                        }, void 0, false, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 160,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-gray-600 mb-6\",\n                            children: score >= 80 ? 'Napakahusay mo! Nakumpleto mo ang level na ito.' : 'Magaling ka! Subukan mo ulit para makakuha ng mas mataas na score.'\n                        }, void 0, false, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 163,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-center text-xl font-bold text-duolingo-blue mb-6\",\n                            children: [\n                                \"+ \",\n                                Math.floor(score),\n                                \" XP\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 176,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    onClick: ()=>router.push('/challenges/multiple-choice'),\n                                    className: \"w-full bg-duolingo-blue text-white hover:bg-duolingo-darkBlue\",\n                                    children: \"Bumalik sa Learning Path\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 181,\n                                    columnNumber: 15\n                                }, this),\n                                score < 80 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    onClick: ()=>window.location.reload(),\n                                    className: \"w-full bg-gray-100 text-gray-700 hover:bg-gray-200\",\n                                    children: \"Subukan Ulit\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 189,\n                                    columnNumber: 17\n                                }, this),\n                                score >= 80 && nextSection !== null && nextLevel !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    onClick: ()=>{\n                                        const nextSectionId = nextSection;\n                                        const nextLevelId = nextLevel;\n                                        console.log(\"[Navigation] Going to next level: Section \".concat(nextSectionId, \", Level \").concat(nextLevelId));\n                                        router.push(\"/challenges/multiple-choice/play?section=\".concat(nextSectionId, \"&level=\").concat(nextLevelId));\n                                    },\n                                    className: \"w-full bg-duolingo-green text-white hover:bg-duolingo-darkGreen\",\n                                    children: \"Susunod na Level\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 198,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 180,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                    lineNumber: 145,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                lineNumber: 139,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n            lineNumber: 138,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen flex flex-col\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto px-4 py-8 flex flex-col flex-1\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mb-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-between mb-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>router.push('/challenges/multiple-choice'),\n                                    className: \"text-gray-600 hover:text-gray-900\",\n                                    \"aria-label\": \"Bumalik\",\n                                    children: \"← Back\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 223,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-sm text-gray-600\",\n                                    children: [\n                                        \"Level \",\n                                        sectionId + 1,\n                                        \" \\xb7 Challenge \",\n                                        levelId + 1\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 230,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                            lineNumber: 222,\n                            columnNumber: 11\n                        }, this),\n                        (()=>{\n                            const pct = Math.max(0, Math.min(100, Math.round(progressCompleted / 5 * 100)));\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full h-[10px] md:h-[14px] bg-gray-200/80 rounded-full overflow-hidden\",\n                                style: {\n                                    boxShadow: 'inset 0 1px 2px rgba(0,0,0,0.06)'\n                                },\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"h-full bg-gradient-to-r from-green-500 to-green-400 rounded-full relative\",\n                                    style: {\n                                        width: \"\".concat(pct, \"%\"),\n                                        transition: prefersReduced ? 'none' : 'width 240ms cubic-bezier(0.22,1,0.36,1)'\n                                    },\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"absolute inset-0 pointer-events-none bg-white/15\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                        lineNumber: 237,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                    lineNumber: 236,\n                                    columnNumber: 17\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                                lineNumber: 235,\n                                columnNumber: 15\n                            }, this);\n                        })()\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                    lineNumber: 221,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex-1 flex items-start md:items-center\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PartsOfSpeechGame, {\n                        levelNumber: sectionId * 10 + levelId,\n                        onComplete: handleComplete,\n                        onProgressChange: (c)=>setProgressCompleted(c)\n                    }, \"\".concat(sectionId, \"-\").concat(levelId), false, {\n                        fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                        lineNumber: 246,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n                    lineNumber: 245,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n            lineNumber: 219,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/ervinraphaelalba/Desktop/X420/src/app/challenges/multiple-choice/play/page.tsx\",\n        lineNumber: 218,\n        columnNumber: 5\n    }, this);\n}\n_s(PlayMultipleChoicePage, \"BJclKdHWtWVE669vhw7GKNwtk6E=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams,\n        _hooks_useGameProgress__WEBPACK_IMPORTED_MODULE_4__.useGameProgress,\n        framer_motion__WEBPACK_IMPORTED_MODULE_6__.useReducedMotion\n    ];\n});\n_c1 = PlayMultipleChoicePage;\nvar _c, _c1;\n$RefreshReg$(_c, \"PartsOfSpeechGame\");\n$RefreshReg$(_c1, \"PlayMultipleChoicePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/challenges/multiple-choice/play/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/store/gameStore.ts":
/*!********************************!*\
  !*** ./src/store/gameStore.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameStore: () => (/* binding */ useGameStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n// src/store/gameStore.ts\n\n\n\n\n\n// Helper to get today's date as ISO string for consistency\nconst getTodayDateString = ()=>{\n    // Use consistent ISO format for all dates\n    return new Date().toISOString();\n};\n// Helper to check if two dates are consecutive days\nconst isConsecutiveDay = (previousDate, currentDate)=>{\n    if (!previousDate) return false;\n    // Parse dates (using Date constructor with YYYY-MM-DD format)\n    const prev = new Date(previousDate);\n    const curr = new Date(currentDate);\n    // Set to same time to compare just the dates\n    prev.setHours(0, 0, 0, 0);\n    curr.setHours(0, 0, 0, 0);\n    // Calculate difference in days\n    const timeDiff = curr.getTime() - prev.getTime();\n    const daysDiff = timeDiff / (1000 * 3600 * 24);\n    // Return true if the dates are exactly 1 day apart\n    return Math.round(daysDiff) === 1;\n};\n// Helper to check if dates are the same day\nconst isSameDay = (dateStr1, dateStr2)=>{\n    if (!dateStr1 || !dateStr2) return false;\n    return dateStr1 === dateStr2;\n};\n// Helper to get tomorrow's date as ISO string for consistency\nconst getTomorrowDateString = ()=>{\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString();\n};\n// Generate sections with levels\nconst generateSections = function() {\n    let count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5, levelsPerSection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n    return Array.from({\n        length: count\n    }).map((_, sectionIndex)=>({\n            id: sectionIndex,\n            title: \"Section \".concat(sectionIndex + 1),\n            description: \"Complete all levels in Section \".concat(sectionIndex + 1),\n            isLocked: sectionIndex !== 0,\n            isCompleted: false,\n            levels: Array.from({\n                length: levelsPerSection\n            }).map((_, levelIndex)=>({\n                    id: levelIndex,\n                    title: \"Level \".concat(levelIndex + 1),\n                    isLocked: levelIndex !== 0,\n                    isCompleted: false,\n                    bestScore: 0,\n                    attempts: 0,\n                    lastPlayed: null\n                }))\n        }));\n};\n// Generate daily quests\nconst generateDailyQuests = ()=>{\n    // Get tomorrow's date in YYYY-MM-DD format (using local time)\n    const expiresAt = getTomorrowDateString();\n    return [\n        {\n            id: 'streak-bonus',\n            title: 'Get 3 Correct in a Row',\n            description: 'Answer three questions correctly in a row',\n            reward: 10,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'complete-games',\n            title: 'Complete 3 Games',\n            description: 'Complete any 3 games today (any score)',\n            reward: 15,\n            progress: 0,\n            target: 3,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'perfect-score',\n            title: 'Perfect Score',\n            description: 'Complete a level with a perfect score',\n            reward: 20,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        }\n    ];\n};\n// Collection name for user game progress\nconst GAME_PROGRESS_COLLECTION = 'gameProgress';\nconst useGameStore = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_3__.persist)((set, get)=>({\n        // Initial state\n        profile: null,\n        score: 0,\n        streak: 0,\n        lastStreakDate: '',\n        streakState: 'none',\n        totalChallengesCompleted: 0,\n        progress: {},\n        achievements: [],\n        gameAchievements: {},\n        recentChallenges: [],\n        // Basic game actions\n        addPoints: (points, gameType)=>set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                console.log(\"[XP Debug] Adding \".concat(points, \" points to \").concat(gameType));\n                console.log(\"[XP Debug] Current XP: \".concat(gameProgress.xp));\n                // Prevent negative XP - calculate new XP ensuring it doesn't go below 0\n                const newXP = Math.max(0, gameProgress.xp + points);\n                // Update XP for the specific game type\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    xp: newXP\n                };\n                console.log(\"[XP Debug] New total XP: \".concat(updatedGameProgress.xp));\n                // Update daily quest progress for XP - DIRECTLY use the game's total XP value for consistency\n                const updatedQuests = gameProgress.quests;\n                const newState = {\n                    score: state.score + points,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...updatedGameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        increaseStreak: ()=>set((state)=>{\n                const today = getTodayDateString();\n                let newStreak = state.streak;\n                // Case 1: Already logged streak today - don't increase, just make active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Case 2: First time playing or continuing streak from yesterday\n                if (isConsecutiveDay(state.lastStreakDate, today) || !state.lastStreakDate) {\n                    newStreak += 1;\n                } else {\n                    newStreak = 1; // Start a new streak\n                }\n                const newState = {\n                    streak: newStreak,\n                    lastStreakDate: today,\n                    streakState: 'active'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        resetStreak: ()=>set((state)=>{\n                const newState = {\n                    streak: 0,\n                    lastStreakDate: '',\n                    streakState: 'none'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        // Progress tracking\n        initializeGameProgress: (gameType)=>{\n            set((state)=>{\n                // Check if progress already exists for this game type\n                if (state.progress[gameType] && state.progress[gameType].sections && state.progress[gameType].sections.length > 0) {\n                    console.log(\"Game progress for \".concat(gameType, \" already initialized.\"));\n                    return state;\n                }\n                console.log(\"Initializing game progress for \".concat(gameType));\n                // Default sections with 5 sections and 5 levels each\n                const sections = generateSections();\n                // First section and first level are always unlocked\n                if (sections.length > 0) {\n                    sections[0].isLocked = false;\n                    if (sections[0].levels && sections[0].levels.length > 0) {\n                        sections[0].levels[0].isLocked = false;\n                    }\n                }\n                // Generate fresh daily quests if needed\n                const quests = generateDailyQuests();\n                return {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            sections,\n                            xp: 0,\n                            quests,\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    }\n                };\n            });\n        },\n        completeLevel: (gameType, sectionId, levelId, score)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Create a deep copy of sections\n                const updatedSections = JSON.parse(JSON.stringify(gameProgress.sections));\n                // Get the section and level\n                const section = updatedSections[sectionId];\n                if (!section || !section.levels[levelId]) return state;\n                // Update level stats - this happens regardless of score\n                const level = section.levels[levelId];\n                level.attempts = (level.attempts || 0) + 1;\n                level.lastPlayed = new Date().toISOString();\n                // Store the best score if higher than previous\n                if (score !== undefined && (level.bestScore === undefined || score > level.bestScore)) {\n                    level.bestScore = score;\n                }\n                // Create a unique ID for this level to track completion\n                const levelKey = \"\".concat(sectionId, \"-\").concat(levelId);\n                // Track completed levels for summary stats\n                let completedLevels = [\n                    ...gameProgress.completedLevels || []\n                ];\n                // Get achievements arrays\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Track where the user should go next (current position)\n                let nextSectionId = sectionId;\n                let nextLevelId = levelId;\n                // Mark level as completed if score is at least 80% (threshold for completing a level)\n                const isLevelCompleted = score !== undefined && score >= 80;\n                if (isLevelCompleted) {\n                    // Mark the level as completed\n                    level.isCompleted = true;\n                    // Add to completed levels array if not already there\n                    if (!completedLevels.includes(levelKey)) {\n                        completedLevels.push(levelKey);\n                    }\n                    // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                    if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                        // Add to game-specific achievements\n                        gameTypeAchievements.push('perfect-score');\n                        // Also add to global achievements for backward compatibility\n                        if (!achievements.includes('perfect-score')) {\n                            achievements.push('perfect-score');\n                        }\n                        console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType));\n                    }\n                    // Calculate the next level ID - advance to the next level\n                    if (levelId < section.levels.length - 1) {\n                        // Move to the next level in the same section\n                        nextLevelId = levelId + 1;\n                        // Unlock the next level\n                        section.levels[nextLevelId].isLocked = false;\n                    } else if (levelId === section.levels.length - 1) {\n                        section.isCompleted = true;\n                        // Check for \"Section Champion\" achievement\n                        // A section is considered completed when all its levels are completed\n                        const isSectionCompleted = section.levels.every((lvl)=>lvl.isCompleted);\n                        if (isSectionCompleted && !gameTypeAchievements.includes('section-champion')) {\n                            // Add to game-specific achievements\n                            gameTypeAchievements.push('section-champion');\n                            // Also add to global achievements for backward compatibility\n                            if (!achievements.includes('section-champion')) {\n                                achievements.push('section-champion');\n                            }\n                            console.log(\"[Achievement] Unlocked: Section Champion in \".concat(gameType));\n                        }\n                        // Move to the next section if available\n                        if (sectionId < updatedSections.length - 1) {\n                            nextSectionId = sectionId + 1;\n                            nextLevelId = 0; // Start at the first level of the next section\n                            // Unlock the next section\n                            updatedSections[nextSectionId].isLocked = false;\n                            // Unlock the first level of the next section\n                            updatedSections[nextSectionId].levels[0].isLocked = false;\n                        }\n                    }\n                }\n                // Update quest progress for game completion\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    // For the 'perfect-score' quest, count games with a score of at least 100 (including bonuses)\n                    if (quest.id === 'perfect-score' && !quest.isCompleted && score !== undefined && score >= 100) {\n                        const newProgress = Math.min(quest.progress + 1, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                // Calculate XP Master achievement\n                if (gameProgress.xp >= 1000 && !gameTypeAchievements.includes('xp-master')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('xp-master');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('xp-master')) {\n                        achievements.push('xp-master');\n                    }\n                    console.log(\"[Achievement] Unlocked: XP Master in \".concat(gameType));\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Prepare updated state\n                const newState = {\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections,\n                            quests: updatedQuests,\n                            completedLevels,\n                            // Update the current position to the next level\n                            currentSection: nextSectionId,\n                            currentLevel: nextLevelId\n                        }\n                    }\n                };\n                // Log the level transition\n                console.log(\"[Progress] Advanced to Section \".concat(nextSectionId, \", Level \").concat(nextLevelId));\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        canAccessLevel: (gameType, sectionId, levelId)=>{\n            const state = get();\n            // Check if game progress exists\n            if (!state.progress || !state.progress[gameType]) return false;\n            const gameProgress = state.progress[gameType];\n            // Check if sections array exists and sectionId is valid\n            if (!gameProgress.sections || !Array.isArray(gameProgress.sections) || sectionId < 0 || sectionId >= gameProgress.sections.length) {\n                return false;\n            }\n            const section = gameProgress.sections[sectionId];\n            // Check if section is locked\n            if (!section || section.isLocked) return false;\n            // Check if levels array exists and levelId is valid\n            if (!section.levels || !Array.isArray(section.levels) || levelId < 0 || levelId >= section.levels.length) {\n                return false;\n            }\n            const level = section.levels[levelId];\n            // Check if level exists and is not locked\n            return level && !level.isLocked;\n        },\n        unlockSection: (gameType, sectionId)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedSections = [\n                    ...gameProgress.sections\n                ];\n                if (updatedSections[sectionId]) {\n                    updatedSections[sectionId].isLocked = false;\n                    // Also unlock the first level\n                    if (updatedSections[sectionId].levels[0]) {\n                        updatedSections[sectionId].levels[0].isLocked = false;\n                    }\n                }\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        // Daily quests\n        addProgressToQuest: (gameType, questId, amount)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId && !quest.isCompleted) {\n                        const newProgress = Math.min(quest.progress + amount, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        // When a quest completes, it automatically gives its reward\n                        if (isCompleted && !quest.isCompleted) {\n                            console.log(\"Quest \".concat(quest.title, \" completed! Reward: \").concat(quest.reward, \" XP\"));\n                            // This is where the extra XP is coming from - automatic quest rewards\n                            setTimeout(()=>get().addPoints(quest.reward, gameType), 0);\n                        }\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeQuest: (gameType, questId)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId) {\n                        // Give XP reward for completing the quest\n                        if (!quest.isCompleted) {\n                            setTimeout(()=>get().addPoints(quest.reward, gameType), 0);\n                        }\n                        return {\n                            ...quest,\n                            progress: quest.target,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        checkAndRefreshQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const today = getTodayDateString();\n                let questsNeedReset = false;\n                // Check if any quests have expired\n                if (gameProgress.quests && Array.isArray(gameProgress.quests)) {\n                    gameProgress.quests.forEach((quest)=>{\n                        // Compare dates in YYYY-MM-DD format (local time)\n                        // If the expiration date is today or earlier, the quest has expired\n                        if (quest.expiresAt <= today) {\n                            questsNeedReset = true;\n                        }\n                    });\n                } else {\n                    // If quests array doesn't exist or is not an array, we need to reset\n                    questsNeedReset = true;\n                }\n                // If quests need to be reset, generate new ones\n                if (questsNeedReset) {\n                    console.log(\"Resetting quests for \".concat(gameType, \" as they have expired\"));\n                    const newState = {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: {\n                                ...gameProgress,\n                                quests: generateDailyQuests()\n                            }\n                        }\n                    };\n                    // Save to Firebase after updating local state\n                    setTimeout(()=>get().saveUserProgress(), 0);\n                    return newState;\n                }\n                return state;\n            });\n        },\n        resetQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Generate fresh quests\n                const freshQuests = generateDailyQuests();\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: freshQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeStreakBonusQuest: (gameType)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === 'streak-bonus' && !quest.isCompleted) {\n                        return {\n                            ...quest,\n                            progress: 1,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        // Challenge tracking\n        addChallengeResult: (result)=>{\n            set((state)=>{\n                const newChallenges = [\n                    ...state.recentChallenges,\n                    result\n                ];\n                // Cap at 50 challenges to prevent document size issues\n                const cappedChallenges = newChallenges.slice(-50);\n                return {\n                    recentChallenges: cappedChallenges\n                };\n            });\n        },\n        // Check if streak should be reset\n        checkStreakReset: ()=>{\n            set((state)=>{\n                console.log('[StreakCheck] Current state:', {\n                    streak: state.streak,\n                    lastStreakDate: state.lastStreakDate,\n                    streakState: state.streakState\n                });\n                // If there's no last streak date, no need to check\n                if (!state.lastStreakDate) {\n                    console.log('[StreakCheck] No last streak date, setting to none');\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                const today = getTodayDateString();\n                // If they already played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played today, keeping streak active');\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // If they last played yesterday, streak is valid but inactive\n                if (isConsecutiveDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played yesterday, streak inactive but valid');\n                    return {\n                        ...state,\n                        streakState: 'inactive'\n                    };\n                }\n                // If it's been more than a day since last play, reset streak\n                console.log('[StreakCheck] Resetting streak due to inactivity');\n                return {\n                    ...state,\n                    streak: 0,\n                    streakState: 'none'\n                };\n            });\n        },\n        checkStreakStatus: ()=>{\n            set((state)=>{\n                const today = getTodayDateString();\n                // If no streak, status is \"none\"\n                if (state.streak === 0) {\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                // If played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Otherwise, streak exists but is inactive\n                return {\n                    ...state,\n                    streakState: 'inactive'\n                };\n            });\n        },\n        // Complete a game and handle streak/XP tracking\n        completeGame: (gameType, score, isCorrect)=>set((state)=>{\n                if (!gameType) return state;\n                console.log(\"[GameDB] Completing game: \".concat(gameType, \", Score: \").concat(score, \", Correct: \").concat(isCorrect));\n                // Update the last played timestamp\n                const gameProgress = state.progress[gameType] || {\n                    sections: generateSections(),\n                    xp: 0,\n                    quests: generateDailyQuests(),\n                    currentSection: 0,\n                    currentLevel: 0,\n                    completedLevels: [],\n                    lastPlayedAt: ''\n                };\n                // Create updated game progress with timestamp\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    lastPlayedAt: new Date().toISOString()\n                };\n                // Update streak handling - IMPORTANT: streak is not reset on wrong answers\n                // It only updates (increases) when it's the first correct answer of a new day\n                const today = getTodayDateString();\n                const streakUpdates = {};\n                // Only consider streak updates for correct answers\n                if (isCorrect) {\n                    if (state.lastStreakDate !== today) {\n                        // This is the first correct answer of a new day - increase streak\n                        streakUpdates.streak = state.streak + 1;\n                        streakUpdates.lastStreakDate = today;\n                        streakUpdates.streakState = 'active';\n                        console.log(\"[GameDB] Increasing streak to \".concat(streakUpdates.streak, \" (first correct answer today)\"));\n                    } else {\n                        // Already played today and got something correct - streak remains active\n                        streakUpdates.streakState = 'active';\n                    }\n                }\n                // Update achievements - track each game type separately\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Check for \"First Steps\" achievement - completing any game\n                if (!gameTypeAchievements.includes('first-steps')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('first-steps');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('first-steps')) {\n                        achievements.push('first-steps');\n                    }\n                    console.log(\"[Achievement] Unlocked: First Steps in \".concat(gameType, \" - Completed your first game!\"));\n                }\n                // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('perfect-score');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('perfect-score')) {\n                        achievements.push('perfect-score');\n                    }\n                    console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType, \" - Scored 100% or higher!\"));\n                }\n                // Check for \"Streak Master\" achievement - maintain a 7-day streak\n                // Note: Streak Master is a global achievement, not game-specific\n                if (streakUpdates.streak !== undefined && streakUpdates.streak >= 7 && !achievements.includes('streak-master')) {\n                    // Add directly to global achievements\n                    achievements.push('streak-master');\n                    // But also add to game-specific achievements for the current game type\n                    if (!gameTypeAchievements.includes('streak-master')) {\n                        gameTypeAchievements.push('streak-master');\n                    }\n                    console.log('[Achievement] Unlocked: Streak Master - Maintained a 7-day streak!');\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Update progress with the game progress\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: updatedGameProgress\n                };\n                // Create a challenge result record\n                const challengeResult = {\n                    id: \"\".concat(gameType, \"-\").concat(Date.now()),\n                    challengeType: gameType,\n                    score,\n                    maxScore: 100,\n                    completedAt: new Date().toISOString(),\n                    duration: 0,\n                    isCorrect,\n                    gameType\n                };\n                // Add to recent challenges\n                const updatedRecentChallenges = [\n                    ...state.recentChallenges,\n                    challengeResult\n                ];\n                // Create the final state updates\n                const gameUpdates = {\n                    progress: updatedProgress,\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    totalChallengesCompleted: state.totalChallengesCompleted + 1,\n                    recentChallenges: updatedRecentChallenges,\n                    ...streakUpdates\n                };\n                // Save to database\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return gameUpdates;\n            }),\n        // Save user progress to database with better error handling\n        saveUserProgress: async ()=>{\n            const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser;\n            if (!user) {\n                console.error('[Database] Cannot save: No authenticated user');\n                return;\n            }\n            try {\n                console.log('[Database] Saving user progress to Firestore...');\n                // Get the user document reference\n                const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, GAME_PROGRESS_COLLECTION, user.uid);\n                // Prepare data to save - ensure all fields exist\n                const dataToSave = {\n                    // User profile\n                    profile: get().profile,\n                    // Game statistics\n                    score: get().score || 0,\n                    streak: get().streak || 0,\n                    lastStreakDate: get().lastStreakDate || '',\n                    streakState: get().streakState || 'none',\n                    totalChallengesCompleted: get().totalChallengesCompleted || 0,\n                    // Achievements\n                    achievements: get().achievements || [],\n                    gameAchievements: get().gameAchievements || {},\n                    // Challenge history\n                    recentChallenges: get().recentChallenges || [],\n                    // Game progress data\n                    progress: get().progress || {},\n                    // Metadata\n                    updatedAt: new Date().toISOString()\n                };\n                // Log a summary of what's being saved\n                console.log(\"[Database] Saving - Score: \".concat(dataToSave.score, \", Streak: \").concat(dataToSave.streak, \", Achievements: \").concat(dataToSave.achievements.length));\n                // Deep clone to avoid Firebase warnings about objects with custom prototypes\n                const cleanData = JSON.parse(JSON.stringify(dataToSave));\n                // Use merge to avoid overwriting any fields not included in current state\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userProgressRef, cleanData, {\n                    merge: true\n                });\n                console.log('[Database] Successfully saved user progress to Firestore');\n            } catch (error) {\n                console.error('[Database] Error saving user progress:', error);\n                // Try to save again after a delay\n                setTimeout(()=>{\n                    console.log('[Database] Retrying failed save operation...');\n                    get().saveUserProgress();\n                }, 3000);\n            }\n        },\n        // User-specific progress\n        loadUserProgress: async ()=>{\n            const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser;\n            if (!user) {\n                console.log('[Auth] No authenticated user found when trying to load progress');\n                return;\n            }\n            try {\n                console.log(\"[Auth] Loading progress for user: \".concat(user.uid));\n                const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, GAME_PROGRESS_COLLECTION, user.uid);\n                const userProgressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userProgressRef);\n                if (userProgressDoc.exists()) {\n                    const data = userProgressDoc.data();\n                    set((state)=>({\n                            ...state,\n                            profile: data.profile || null,\n                            score: data.score || 0,\n                            streak: data.streak || 0,\n                            lastStreakDate: data.lastStreakDate || '',\n                            streakState: data.streakState || 'none',\n                            totalChallengesCompleted: data.totalChallengesCompleted || 0,\n                            achievements: data.achievements || [],\n                            gameAchievements: data.gameAchievements || {},\n                            recentChallenges: data.recentChallenges || [],\n                            progress: data.progress || {}\n                        }));\n                    console.log('[Auth] Successfully loaded user progress from Firestore');\n                } else {\n                    console.log('[Auth] No saved progress found for user. Initializing new progress.');\n                    // Create initial game progress structure\n                    const initialProgress = {\n                        'make-sentence': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        },\n                        'multiple-choice': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    };\n                    // First, unlock the first level of each game type\n                    for (const gameType of Object.keys(initialProgress)){\n                        if (initialProgress[gameType].sections.length > 0) {\n                            initialProgress[gameType].sections[0].isLocked = false;\n                            if (initialProgress[gameType].sections[0].levels.length > 0) {\n                                initialProgress[gameType].sections[0].levels[0].isLocked = false;\n                            }\n                        }\n                    }\n                    // Create initial user profile\n                    const initialProfile = {\n                        displayName: user.displayName,\n                        email: user.email,\n                        photoURL: user.photoURL,\n                        joinDate: new Date().toISOString(),\n                        lastActiveDate: new Date().toISOString(),\n                        gradeLevel: null,\n                        preferences: {\n                            emailNotifications: false,\n                            dailyReminder: true\n                        }\n                    };\n                    // Create initial state to update locally\n                    const newUserData = {\n                        profile: initialProfile,\n                        score: 0,\n                        streak: 0,\n                        lastStreakDate: '',\n                        streakState: 'none',\n                        totalChallengesCompleted: 0,\n                        achievements: [],\n                        gameAchievements: {},\n                        recentChallenges: [],\n                        progress: initialProgress,\n                        createdAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString(),\n                        userId: user.uid\n                    };\n                    // Update local state\n                    set((state)=>({\n                            ...state,\n                            ...newUserData\n                        }));\n                    // IMPORTANT: Save the initial data to Firestore immediately\n                    // This ensures the user has a gameProgress document from the start\n                    try {\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userProgressRef, newUserData);\n                        console.log('[Auth] Successfully created new user progress document in Firestore');\n                    } catch (error) {\n                        console.error('[Auth] Error creating initial progress document:', error);\n                    }\n                }\n                // Check if streak should be reset after loading data\n                get().checkStreakReset();\n            } catch (error) {\n                console.error('[Auth] Error loading user progress:', error);\n            }\n        },\n        // Ensure game progress exists for a given game type\n        ensureGameProgressExists: (gameType)=>{\n            set((state)=>{\n                if (!state.progress[gameType]) {\n                    const newProgress = {\n                        sections: generateSections(),\n                        xp: 0,\n                        quests: generateDailyQuests(),\n                        currentSection: 0,\n                        currentLevel: 0,\n                        completedLevels: []\n                    };\n                    return {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: newProgress\n                        }\n                    };\n                }\n                return state;\n            });\n        },\n        // Profile management\n        updateUserProfile: (updates)=>{\n            set((state)=>({\n                    profile: {\n                        ...state.profile,\n                        ...updates\n                    }\n                }));\n        }\n    }), {\n    name: 'game-storage',\n    // Don't persist user progress from localStorage to avoid hydration issues\n    partialize: (state)=>({}),\n    // Only enable storage on the client side\n    skipHydration: true\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/gameStore.ts\n"));

/***/ })

});