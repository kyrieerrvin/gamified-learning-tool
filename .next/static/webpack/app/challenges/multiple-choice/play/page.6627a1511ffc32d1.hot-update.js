"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/challenges/multiple-choice/play/page",{

/***/ "(app-pages-browser)/./src/hooks/useGameProgress.ts":
/*!**************************************!*\
  !*** ./src/hooks/useGameProgress.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameProgress: () => (/* binding */ useGameProgress)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/context/AuthContext */ \"(app-pages-browser)/./src/context/AuthContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ useGameProgress auto */ \n\n\n\n// Helper functions\nconst getTodayDateString = ()=>{\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n};\nconst isSameDay = (dateStr1, dateStr2)=>{\n    if (!dateStr1 || !dateStr2) return false;\n    return dateStr1 === dateStr2;\n};\nconst isConsecutiveDay = (lastDateStr, todayStr)=>{\n    if (!lastDateStr || !todayStr) return false;\n    const lastDate = new Date(lastDateStr);\n    const today = new Date(todayStr);\n    const timeDiff = today.getTime() - lastDate.getTime();\n    const daysDiff = timeDiff / (1000 * 3600 * 24);\n    return Math.round(daysDiff) === 1;\n};\n// Generate 3 Levels (Easy, Difficult, Hard) each with 10 challenges\nconst generateSections = ()=>{\n    const sections = [];\n    const levelNames = [\n        'Easy',\n        'Difficult',\n        'Hard'\n    ];\n    for(let sectionId = 0; sectionId < 3; sectionId++){\n        const levels = [];\n        for(let levelId = 0; levelId < 10; levelId++){\n            levels.push({\n                id: levelId,\n                title: \"Challenge \".concat(levelId + 1),\n                isLocked: !(sectionId === 0 && levelId === 0),\n                isCompleted: false,\n                bestScore: 0,\n                attempts: 0,\n                lastPlayed: null\n            });\n        }\n        sections.push({\n            id: sectionId,\n            title: \"Level \".concat(sectionId + 1, \": \").concat(levelNames[sectionId] || '').trim(),\n            description: \"Complete all challenges in \".concat(levelNames[sectionId] || \"Level \".concat(sectionId + 1)),\n            isLocked: sectionId !== 0,\n            isCompleted: false,\n            levels\n        });\n    }\n    return sections;\n};\n// Generate daily quests\nconst generateDailyQuests = ()=>{\n    const today = getTodayDateString();\n    const expiresAt = today; // Expires at end of today\n    return [\n        {\n            id: 'daily-xp',\n            title: 'Daily XP',\n            description: 'Earn 50 XP today',\n            reward: 10,\n            progress: 0,\n            target: 50,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'streak-bonus',\n            title: 'Get 3 Correct in a Row',\n            description: 'Answer three questions correctly in a row',\n            reward: 10,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'complete-games',\n            title: 'Complete 3 Games',\n            description: 'Complete any 3 games today (any score)',\n            reward: 15,\n            progress: 0,\n            target: 3,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'perfect-score',\n            title: 'Perfect Score',\n            description: 'Complete a level with a perfect score',\n            reward: 20,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        }\n    ];\n};\n// Default initial data\nconst getInitialData = (user)=>{\n    return {\n        profile: {\n            displayName: (user === null || user === void 0 ? void 0 : user.displayName) || null,\n            email: (user === null || user === void 0 ? void 0 : user.email) || null,\n            photoURL: (user === null || user === void 0 ? void 0 : user.photoURL) || null,\n            joinDate: new Date().toISOString(),\n            lastActiveDate: new Date().toISOString(),\n            gradeLevel: null,\n            preferences: {\n                emailNotifications: false,\n                dailyReminder: true\n            }\n        },\n        score: 0,\n        streak: 0,\n        lastStreakDate: '',\n        streakState: 'none',\n        totalChallengesCompleted: 0,\n        progress: {\n            'make-sentence': {\n                currentLevel: 0,\n                currentSection: 0,\n                sections: generateSections(),\n                xp: 0,\n                quests: generateDailyQuests(),\n                completedLevels: []\n            },\n            'multiple-choice': {\n                currentLevel: 0,\n                currentSection: 0,\n                sections: generateSections(),\n                xp: 0,\n                quests: generateDailyQuests(),\n                completedLevels: []\n            }\n        },\n        achievements: [],\n        gameAchievements: {},\n        recentChallenges: [],\n        updatedAt: new Date().toISOString()\n    };\n};\nconst useGameProgress = ()=>{\n    const { user } = (0,_context_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Real-time listener\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useGameProgress.useEffect\": ()=>{\n            if (!(user === null || user === void 0 ? void 0 : user.uid)) {\n                setLoading(false);\n                return;\n            }\n            console.log('[GameProgress] Setting up real-time listener for user:', user.uid);\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, 'gameProgress', user.uid);\n            const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(userDocRef, {\n                \"useGameProgress.useEffect.unsubscribe\": async (doc)=>{\n                    try {\n                        if (doc.exists()) {\n                            const docData = doc.data();\n                            console.log('[GameProgress] Real-time data received:', docData);\n                            // Migration: ensure 3 Levels with 10 challenges each for both games\n                            const needsMigration = {\n                                \"useGameProgress.useEffect.unsubscribe.needsMigration\": (progress)=>{\n                                    if (!progress || !progress.sections) return true;\n                                    if (progress.sections.length !== 3) return true;\n                                    for (const s of progress.sections){\n                                        if (!s.levels || s.levels.length !== 10) return true;\n                                    }\n                                    return false;\n                                }\n                            }[\"useGameProgress.useEffect.unsubscribe.needsMigration\"];\n                            const updatedProgress = {\n                                ...docData.progress\n                            };\n                            let didMigrate = false;\n                            for (const gameType of [\n                                'make-sentence',\n                                'multiple-choice'\n                            ]){\n                                var _docData_progress;\n                                const gp = (_docData_progress = docData.progress) === null || _docData_progress === void 0 ? void 0 : _docData_progress[gameType];\n                                if (!gp || needsMigration(gp)) {\n                                    didMigrate = true;\n                                    const sections = generateSections();\n                                    // Unlock first level and first challenge\n                                    if (sections.length > 0) {\n                                        sections[0].isLocked = false;\n                                        if (sections[0].levels.length > 0) sections[0].levels[0].isLocked = false;\n                                    }\n                                    updatedProgress[gameType] = {\n                                        sections,\n                                        xp: (gp === null || gp === void 0 ? void 0 : gp.xp) || 0,\n                                        quests: (gp === null || gp === void 0 ? void 0 : gp.quests) || [],\n                                        currentSection: 0,\n                                        currentLevel: 0,\n                                        completedLevels: []\n                                    };\n                                }\n                            }\n                            // Reset streak if a day was missed (device local date)\n                            try {\n                                const today = getTodayDateString();\n                                const missedDay = !!docData.lastStreakDate && !isSameDay(docData.lastStreakDate, today) && !isConsecutiveDay(docData.lastStreakDate, today) && (docData.streak || 0) > 0;\n                                if (missedDay) {\n                                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                                        streak: 0,\n                                        streakState: 'none',\n                                        updatedAt: new Date().toISOString()\n                                    });\n                                    docData.streak = 0;\n                                    docData.streakState = 'none';\n                                }\n                            } catch (e) {\n                                console.warn('[GameProgress] Streak reset check failed:', e);\n                            }\n                            if (didMigrate) {\n                                console.log('[GameProgress] Migrating progress to 3 levels × 10 challenges structure');\n                                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                                    progress: updatedProgress,\n                                    updatedAt: new Date().toISOString()\n                                });\n                                setData({\n                                    ...docData,\n                                    progress: updatedProgress\n                                });\n                            } else {\n                                setData(docData);\n                            }\n                        } else {\n                            // Create initial data if document doesn't exist\n                            console.log('[GameProgress] No document found, creating initial data');\n                            const initialData = getInitialData(user);\n                            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(userDocRef, initialData);\n                            setData(initialData);\n                        }\n                        setLoading(false);\n                        setError(null);\n                    } catch (err) {\n                        console.error('[GameProgress] Error processing real-time data:', err);\n                        setError(err instanceof Error ? err.message : 'Unknown error');\n                        setLoading(false);\n                    }\n                }\n            }[\"useGameProgress.useEffect.unsubscribe\"], {\n                \"useGameProgress.useEffect.unsubscribe\": (err)=>{\n                    console.error('[GameProgress] Real-time listener error:', err);\n                    setError(err.message);\n                    setLoading(false);\n                }\n            }[\"useGameProgress.useEffect.unsubscribe\"]);\n            return ({\n                \"useGameProgress.useEffect\": ()=>{\n                    console.log('[GameProgress] Cleaning up real-time listener');\n                    unsubscribe();\n                }\n            })[\"useGameProgress.useEffect\"];\n        }\n    }[\"useGameProgress.useEffect\"], [\n        user === null || user === void 0 ? void 0 : user.uid\n    ]);\n    // Action functions\n    const updateData = async (updates)=>{\n        if (!(user === null || user === void 0 ? void 0 : user.uid)) return;\n        try {\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, 'gameProgress', user.uid);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                ...updates,\n                updatedAt: new Date().toISOString()\n            });\n        } catch (err) {\n            console.error('[GameProgress] Error updating data:', err);\n            throw err;\n        }\n    };\n    const addPoints = async (points, gameType)=>{\n        if (!(user === null || user === void 0 ? void 0 : user.uid)) return;\n        try {\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, 'gameProgress', user.uid);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                [\"progress.\".concat(gameType, \".xp\")]: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.increment)(points),\n                score: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.increment)(points),\n                updatedAt: new Date().toISOString()\n            });\n        } catch (err) {\n            console.error('[GameProgress] Error incrementing XP:', err);\n            throw err;\n        }\n    };\n    const setQuests = async (gameType, quests)=>{\n        if (!(user === null || user === void 0 ? void 0 : user.uid)) return;\n        try {\n            const userDocRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, 'gameProgress', user.uid);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                [\"progress.\".concat(gameType, \".quests\")]: quests,\n                updatedAt: new Date().toISOString()\n            });\n        } catch (err) {\n            console.error('[GameProgress] Error updating quests:', err);\n            throw err;\n        }\n    };\n    const increaseStreak = async ()=>{\n        if (!(user === null || user === void 0 ? void 0 : user.uid) || !data) return;\n        const today = getTodayDateString();\n        let newStreak = data.streak;\n        // Don't increase if already played today\n        if (isSameDay(data.lastStreakDate, today)) {\n            return;\n        }\n        // Increase streak if consecutive day or starting new\n        if (isConsecutiveDay(data.lastStreakDate, today) || !data.lastStreakDate) {\n            newStreak += 1;\n        } else {\n            newStreak = 1; // Reset to 1 if missed days\n        }\n        await updateData({\n            streak: newStreak,\n            lastStreakDate: today,\n            streakState: 'active'\n        });\n    };\n    const completeLevel = async (gameType, sectionId, levelId, score)=>{\n        if (!(user === null || user === void 0 ? void 0 : user.uid) || !data) return;\n        const gameProgress = data.progress[gameType];\n        if (!gameProgress) return;\n        const updatedSections = [\n            ...gameProgress.sections\n        ];\n        const section = updatedSections[sectionId];\n        if (!section || !section.levels[levelId]) return;\n        const level = section.levels[levelId];\n        level.attempts = (level.attempts || 0) + 1;\n        level.lastPlayed = new Date().toISOString();\n        if (score !== undefined && (level.bestScore === undefined || score > level.bestScore)) {\n            level.bestScore = score;\n        }\n        // Treat invocation of completeLevel as \"finished the level\"\n        // Always mark as completed and advance unlocking\n        let nextSectionId = sectionId;\n        let nextLevelId = levelId;\n        level.isCompleted = true;\n        // Unlock next level or section\n        if (levelId < section.levels.length - 1) {\n            nextLevelId = levelId + 1;\n            section.levels[nextLevelId].isLocked = false;\n        } else {\n            // Completed section, unlock next section\n            section.isCompleted = true;\n            if (sectionId < updatedSections.length - 1) {\n                nextSectionId = sectionId + 1;\n                nextLevelId = 0;\n                updatedSections[nextSectionId].isLocked = false;\n                updatedSections[nextSectionId].levels[0].isLocked = false;\n            }\n        }\n        // Prepare achievements updates (simple MVP)\n        const updatedGameAchievements = {\n            ...data.gameAchievements || {}\n        };\n        const gameTypeAchievements = new Set(updatedGameAchievements[gameType] || []);\n        const updatedAchievements = new Set(data.achievements || []);\n        // First Steps: completing a first game\n        if (!gameTypeAchievements.has('first-steps')) {\n            gameTypeAchievements.add('first-steps');\n            updatedAchievements.add('first-steps');\n        }\n        // Perfect Score: score 100\n        if (score !== undefined && score >= 100 && !gameTypeAchievements.has('perfect-score')) {\n            gameTypeAchievements.add('perfect-score');\n            updatedAchievements.add('perfect-score');\n        }\n        // Section Champion: entire section completed\n        const sectionCompleted = section.levels.every((l)=>l.isCompleted);\n        if (sectionCompleted && !gameTypeAchievements.has('section-champion')) {\n            gameTypeAchievements.add('section-champion');\n            updatedAchievements.add('section-champion');\n        }\n        updatedGameAchievements[gameType] = Array.from(gameTypeAchievements);\n        await updateData({\n            progress: {\n                ...data.progress,\n                [gameType]: {\n                    ...gameProgress,\n                    sections: updatedSections,\n                    currentSection: nextSectionId,\n                    currentLevel: nextLevelId\n                }\n            },\n            achievements: Array.from(updatedAchievements),\n            gameAchievements: updatedGameAchievements\n        });\n    };\n    const canAccessLevel = (gameType, sectionId, levelId)=>{\n        if (!data || !data.progress[gameType]) return false;\n        const gameProgress = data.progress[gameType];\n        if (!gameProgress.sections || sectionId < 0 || sectionId >= gameProgress.sections.length) {\n            return false;\n        }\n        const section = gameProgress.sections[sectionId];\n        if (!section || section.isLocked) return false;\n        if (!section.levels || levelId < 0 || levelId >= section.levels.length) {\n            return false;\n        }\n        const level = section.levels[levelId];\n        return level && !level.isLocked;\n    };\n    return {\n        data,\n        loading,\n        error,\n        // Actions\n        updateData,\n        addPoints,\n        setQuests,\n        increaseStreak,\n        completeLevel,\n        canAccessLevel,\n        // Convenience getters\n        profile: (data === null || data === void 0 ? void 0 : data.profile) || null,\n        score: (data === null || data === void 0 ? void 0 : data.score) || 0,\n        streak: (data === null || data === void 0 ? void 0 : data.streak) || 0,\n        streakState: (data === null || data === void 0 ? void 0 : data.streakState) || 'none',\n        progress: (data === null || data === void 0 ? void 0 : data.progress) || {},\n        achievements: (data === null || data === void 0 ? void 0 : data.achievements) || [],\n        gameAchievements: (data === null || data === void 0 ? void 0 : data.gameAchievements) || {},\n        recentChallenges: (data === null || data === void 0 ? void 0 : data.recentChallenges) || []\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useGameProgress.ts\n"));

/***/ })

});