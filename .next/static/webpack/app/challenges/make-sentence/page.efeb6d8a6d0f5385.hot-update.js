"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/challenges/make-sentence/page",{

/***/ "(app-pages-browser)/./src/services/nlp/index.ts":
/*!***********************************!*\
  !*** ./src/services/nlp/index.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeSentence: () => (/* binding */ analyzeSentence),\n/* harmony export */   checkNlpHealth: () => (/* binding */ checkNlpHealth),\n/* harmony export */   createCustomGame: () => (/* binding */ createCustomGame),\n/* harmony export */   fetchNlpGameData: () => (/* binding */ fetchNlpGameData),\n/* harmony export */   fetchSentenceWords: () => (/* binding */ fetchSentenceWords),\n/* harmony export */   verifyAnswer: () => (/* binding */ verifyAnswer),\n/* harmony export */   verifySentence: () => (/* binding */ verifySentence)\n/* harmony export */ });\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/config */ \"(app-pages-browser)/./src/lib/config.ts\");\n/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/api */ \"(app-pages-browser)/./src/utils/api.ts\");\n/* harmony import */ var _data_mock_posData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../data/mock/posData */ \"(app-pages-browser)/./src/data/mock/posData.ts\");\n// src/services/nlp/index.ts\n/* \n * NLP service integration for Tagalog language analysis\n */ \n\n\n// Helper function to get the NLP API URL\nfunction getNlpApiUrl() {\n    return _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.API_BASE_URL;\n}\n/**\n * Fetches game data from the NLP service\n * @param customSentence Optional custom sentence to use\n * @returns Promise with game data\n */ async function fetchNlpGameData(customSentence, difficulty) {\n    try {\n        // Create the URL with query parameters\n        let urlParams = new URLSearchParams();\n        if (customSentence) {\n            urlParams.append('sentence', customSentence);\n        }\n        if (difficulty) {\n            urlParams.append('difficulty', difficulty);\n        }\n        // Try using the Next.js API proxy endpoint first\n        const proxyUrl = \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.POS_GAME_PROXY).concat(urlParams.toString() ? \"?\".concat(urlParams.toString()) : '');\n        try {\n            console.log(\"Attempting to fetch game data via Next.js proxy: \".concat(proxyUrl));\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiGet)(proxyUrl);\n        } catch (proxyError) {\n            console.warn(\"Next.js proxy route failed, trying direct API:\", proxyError);\n            // Fall back to direct API connection\n            const directUrl = \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.CALAMANCY_API).concat(urlParams.toString() ? \"?\".concat(urlParams.toString()) : '');\n            console.log(\"Fetching NLP game data directly from: \".concat(directUrl));\n            try {\n                return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiGet)(directUrl);\n            } catch (directError) {\n                console.warn(\"Direct API connection failed:\", directError);\n                throw directError; // Re-throw to trigger mock data fallback\n            }\n        }\n    } catch (error) {\n        console.error(\"Error fetching game data from both sources, using mock data:\", error);\n        // Final fallback to mock data\n        console.log(\"Using mock POS game data as ultimate fallback\");\n        return _data_mock_posData__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n    }\n}\n/**\n * Submit a custom sentence to create a game\n * @param sentence The custom Tagalog sentence to use\n * @returns Promise with game data\n */ async function createCustomGame(sentence) {\n    try {\n        // Try proxy endpoint first\n        const proxyUrl = \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.POS_GAME_PROXY);\n        console.log('Creating custom game with sentence: \"'.concat(sentence, '\" via proxy'));\n        try {\n            // Use our centralized API service\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(proxyUrl, {\n                sentence\n            });\n        } catch (proxyError) {\n            console.warn(\"Next.js proxy route failed for custom game, trying direct API:\", proxyError);\n            // Fall back to direct API connection\n            const directUrl = \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.CALAMANCY_API);\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(directUrl, {\n                sentence\n            });\n        }\n    } catch (error) {\n        console.error(\"Error creating custom game from both sources:\", error);\n        // Fallback to basic mock data with the custom sentence\n        const mockData = {\n            ..._data_mock_posData__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n        };\n        mockData.sentence = sentence;\n        return mockData;\n    }\n}\n/**\n * Analyze a Tagalog sentence to get POS tags for each word\n * @param sentence The Tagalog sentence to analyze\n * @returns Promise with analysis results\n */ async function analyzeSentence(sentence) {\n    try {\n        // Try proxy endpoint first\n        const proxyUrl = _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.NLP_TEST_PROXY;\n        console.log('Analyzing sentence via Next.js API route: \"'.concat(sentence, '\"'));\n        try {\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(proxyUrl, {\n                sentence\n            });\n        } catch (proxyError) {\n            console.warn(\"Next.js proxy route failed for sentence analysis, trying direct API:\", proxyError);\n            // Fall back to direct API connection\n            const directUrl = _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.ANALYZE_ENDPOINT;\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(directUrl, {\n                sentence\n            });\n        }\n    } catch (error) {\n        console.error(\"Error analyzing sentence from both sources:\", error);\n        // Basic fallback response\n        return {\n            sentence,\n            tokens: sentence.split(' ').map((word)=>({\n                    text: word,\n                    pos: 'UNK',\n                    description: 'Unknown word type'\n                })),\n            method: 'fallback'\n        };\n    }\n}\n/**\n * Verify an answer to a POS question\n * @param word The word being asked about\n * @param sentence The sentence containing the word\n * @param selectedAnswer The answer selected by the user\n * @returns Promise with verification result\n */ async function verifyAnswer(word, sentence, selectedAnswer) {\n    try {\n        // Use the Next.js API route for proxying the request\n        const url = '/api/verify';\n        // Use our centralized API service\n        return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(url, {\n            word,\n            sentence,\n            selected: selectedAnswer\n        });\n    } catch (error) {\n        console.error(\"Error verifying answer:\", error);\n        throw error;\n    }\n}\n/**\n * Check the health of the NLP API\n * @returns Promise with health information\n */ async function checkNlpHealth() {\n    try {\n        // Try to check health via our centralized API utilities\n        const healthEndpoint = _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.HEALTH_ENDPOINT;\n        console.log(\"Checking NLP API health at: \".concat(healthEndpoint));\n        try {\n            // Use our centralized apiGet function instead of direct fetch\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiGet)(healthEndpoint);\n        } catch (error) {\n            console.warn('Failed to check health with apiGet, trying direct fetch as fallback');\n            // Fallback to simple fetch with timeout\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 3000); // 3s timeout\n            try {\n                const response = await fetch(healthEndpoint, {\n                    method: 'GET',\n                    headers: {\n                        'Accept': 'application/json'\n                    },\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                if (!response.ok) {\n                    throw new Error(\"Health endpoint returned \".concat(response.status));\n                }\n                return await response.json();\n            } catch (fetchError) {\n                console.error('Direct fetch for health check failed:', fetchError);\n                throw fetchError;\n            } finally{\n                clearTimeout(timeoutId);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error checking NLP health:\", error);\n        // Fallback response\n        return {\n            status: 'offline',\n            model: 'unavailable',\n            model_status: 'offline',\n            pos_tags_available: []\n        };\n    }\n}\n/**\n * Fetches words for the Make a Sentence game\n * @returns Promise with an array of words with descriptions\n */ async function fetchSentenceWords(grade) {\n    try {\n        // Try proxy endpoint first\n        const proxyUrl = grade ? \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_WORDS_PROXY, \"?grade=\").concat(grade) : _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_WORDS_PROXY;\n        console.log(\"Fetching sentence words via Next.js API route\");\n        try {\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiGet)(proxyUrl);\n        } catch (proxyError) {\n            console.warn(\"Next.js proxy route failed for sentence words, trying direct API:\", proxyError);\n            // Fall back to direct API connection\n            const directUrl = grade ? \"\".concat(_lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_WORDS_ENDPOINT, \"?grade=\").concat(grade) : _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_WORDS_ENDPOINT;\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiGet)(directUrl);\n        }\n    } catch (error) {\n        console.error(\"Error fetching sentence words from both sources:\", error);\n        // Fallback words\n        return [\n            {\n                word: 'ako',\n                description: 'I or me (pronoun)'\n            },\n            {\n                word: 'kumain',\n                description: 'to eat (verb)'\n            },\n            {\n                word: 'ng',\n                description: 'of (particle)'\n            },\n            {\n                word: 'kanin',\n                description: 'rice (noun)'\n            }\n        ];\n    }\n}\n/**\n * Verify a sentence created by the user\n * @param word The word that should be used in the sentence\n * @param sentence The sentence created by the user\n * @returns Promise with verification result\n */ async function verifySentence(word, sentence) {\n    try {\n        const data = {\n            word,\n            sentence\n        };\n        // Try proxy endpoint first\n        const proxyUrl = _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_VERIFY_PROXY;\n        console.log(\"Verifying sentence via Next.js API route\");\n        try {\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(proxyUrl, data);\n        } catch (proxyError) {\n            console.warn(\"Next.js proxy route failed for sentence verification, trying direct API:\", proxyError);\n            // Fall back to direct API connection\n            const directUrl = _lib_config__WEBPACK_IMPORTED_MODULE_0__.API_ENDPOINTS.MAKE_SENTENCE_VERIFY_ENDPOINT;\n            return await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.apiPost)(directUrl, data);\n        }\n    } catch (error) {\n        console.error(\"Error verifying sentence from both sources:\", error);\n        // Simple fallback validation (just checks if word is in sentence)\n        const isCorrect = sentence.toLowerCase().includes(word.toLowerCase());\n        return {\n            isCorrect,\n            feedback: isCorrect ? 'Sentence accepted (fallback validation)' : 'Your sentence must include the word \"'.concat(word, '\"'),\n            word,\n            sentence\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/nlp/index.ts\n"));

/***/ })

});