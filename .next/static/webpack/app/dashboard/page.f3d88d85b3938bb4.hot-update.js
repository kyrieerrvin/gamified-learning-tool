"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/store/gameStore.ts":
/*!********************************!*\
  !*** ./src/store/gameStore.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameStore: () => (/* binding */ useGameStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n// src/store/gameStore.ts\n\n\n\n\n\n// Helper to get today's date as ISO string for consistency\nconst getTodayDateString = ()=>{\n    // Use consistent ISO format for all dates\n    return new Date().toISOString();\n};\n// Helper to check if two dates are consecutive days\nconst isConsecutiveDay = (previousDate, currentDate)=>{\n    if (!previousDate) return false;\n    // Parse dates (using Date constructor with YYYY-MM-DD format)\n    const prev = new Date(previousDate);\n    const curr = new Date(currentDate);\n    // Set to same time to compare just the dates\n    prev.setHours(0, 0, 0, 0);\n    curr.setHours(0, 0, 0, 0);\n    // Calculate difference in days\n    const timeDiff = curr.getTime() - prev.getTime();\n    const daysDiff = timeDiff / (1000 * 3600 * 24);\n    // Return true if the dates are exactly 1 day apart\n    return Math.round(daysDiff) === 1;\n};\n// Helper to check if dates are the same day\nconst isSameDay = (dateStr1, dateStr2)=>{\n    if (!dateStr1 || !dateStr2) return false;\n    return dateStr1 === dateStr2;\n};\n// Helper to get tomorrow's date as ISO string for consistency\nconst getTomorrowDateString = ()=>{\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString();\n};\n// Generate sections with levels\nconst generateSections = function() {\n    let count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5, levelsPerSection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n    return Array.from({\n        length: count\n    }).map((_, sectionIndex)=>({\n            id: sectionIndex,\n            title: \"Section \".concat(sectionIndex + 1),\n            description: \"Complete all levels in Section \".concat(sectionIndex + 1),\n            isLocked: sectionIndex !== 0,\n            isCompleted: false,\n            levels: Array.from({\n                length: levelsPerSection\n            }).map((_, levelIndex)=>({\n                    id: levelIndex,\n                    title: \"Level \".concat(levelIndex + 1),\n                    isLocked: levelIndex !== 0,\n                    isCompleted: false,\n                    bestScore: 0,\n                    attempts: 0,\n                    lastPlayed: null\n                }))\n        }));\n};\n// Generate daily quests\nconst generateDailyQuests = ()=>{\n    // Get tomorrow's date in YYYY-MM-DD format (using local time)\n    const expiresAt = getTomorrowDateString();\n    return [\n        {\n            id: 'streak-bonus',\n            title: 'Get 3 Correct in a Row',\n            description: 'Answer three questions correctly in a row',\n            reward: 10,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'complete-games',\n            title: 'Complete 3 Games',\n            description: 'Complete any 3 games today (any score)',\n            reward: 15,\n            progress: 0,\n            target: 3,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'perfect-score',\n            title: 'Perfect Score',\n            description: 'Complete a level with a perfect score',\n            reward: 20,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        }\n    ];\n};\n// Collection name for user game progress\nconst GAME_PROGRESS_COLLECTION = 'gameProgress';\nconst useGameStore = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_3__.persist)((set, get)=>({\n        // Initial state\n        profile: null,\n        score: 0,\n        streak: 0,\n        lastStreakDate: '',\n        streakState: 'none',\n        totalChallengesCompleted: 0,\n        progress: {},\n        achievements: [],\n        gameAchievements: {},\n        recentChallenges: [],\n        // Basic game actions\n        addPoints: (points, gameType)=>set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                console.log(\"[XP Debug] Adding \".concat(points, \" points to \").concat(gameType));\n                console.log(\"[XP Debug] Current XP: \".concat(gameProgress.xp));\n                // Prevent negative XP - calculate new XP ensuring it doesn't go below 0\n                const newXP = Math.max(0, gameProgress.xp + points);\n                // Update XP for the specific game type\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    xp: newXP\n                };\n                console.log(\"[XP Debug] New total XP: \".concat(updatedGameProgress.xp));\n                // Update daily quest progress for XP - DIRECTLY use the game's total XP value for consistency\n                const updatedQuests = gameProgress.quests;\n                const newState = {\n                    score: state.score + points,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...updatedGameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        increaseStreak: ()=>set((state)=>{\n                const today = getTodayDateString();\n                let newStreak = state.streak;\n                // Case 1: Already logged streak today - don't increase, just make active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Case 2: First time playing or continuing streak from yesterday\n                if (isConsecutiveDay(state.lastStreakDate, today) || !state.lastStreakDate) {\n                    newStreak += 1;\n                } else {\n                    newStreak = 1; // Start a new streak\n                }\n                const newState = {\n                    streak: newStreak,\n                    lastStreakDate: today,\n                    streakState: 'active'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        resetStreak: ()=>set((state)=>{\n                const newState = {\n                    streak: 0,\n                    lastStreakDate: '',\n                    streakState: 'none'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        // Progress tracking\n        initializeGameProgress: (gameType)=>{\n            set((state)=>{\n                // Check if progress already exists for this game type\n                if (state.progress[gameType] && state.progress[gameType].sections && state.progress[gameType].sections.length > 0) {\n                    console.log(\"Game progress for \".concat(gameType, \" already initialized.\"));\n                    return state;\n                }\n                console.log(\"Initializing game progress for \".concat(gameType));\n                // Default sections with 5 sections and 5 levels each\n                const sections = generateSections();\n                // First section and first level are always unlocked\n                if (sections.length > 0) {\n                    sections[0].isLocked = false;\n                    if (sections[0].levels && sections[0].levels.length > 0) {\n                        sections[0].levels[0].isLocked = false;\n                    }\n                }\n                // Generate fresh daily quests if needed\n                const quests = generateDailyQuests();\n                return {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            sections,\n                            xp: 0,\n                            quests,\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    }\n                };\n            });\n        },\n        completeLevel: (gameType, sectionId, levelId, score)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Create a deep copy of sections\n                const updatedSections = JSON.parse(JSON.stringify(gameProgress.sections));\n                // Get the section and level\n                const section = updatedSections[sectionId];\n                if (!section || !section.levels[levelId]) return state;\n                // Update level stats - this happens regardless of score\n                const level = section.levels[levelId];\n                level.attempts = (level.attempts || 0) + 1;\n                level.lastPlayed = new Date().toISOString();\n                // Store the best score if higher than previous\n                if (score !== undefined && (level.bestScore === undefined || score > level.bestScore)) {\n                    level.bestScore = score;\n                }\n                // Create a unique ID for this level to track completion\n                const levelKey = \"\".concat(sectionId, \"-\").concat(levelId);\n                // Track completed levels for summary stats\n                let completedLevels = [\n                    ...gameProgress.completedLevels || []\n                ];\n                // Get achievements arrays\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Track where the user should go next (current position)\n                let nextSectionId = sectionId;\n                let nextLevelId = levelId;\n                // Mark level as completed if score is at least 80% (threshold for completing a level)\n                const isLevelCompleted = score !== undefined && score >= 80;\n                if (isLevelCompleted) {\n                    // Mark the level as completed\n                    level.isCompleted = true;\n                    // Add to completed levels array if not already there\n                    if (!completedLevels.includes(levelKey)) {\n                        completedLevels.push(levelKey);\n                    }\n                    // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                    if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                        // Add to game-specific achievements\n                        gameTypeAchievements.push('perfect-score');\n                        // Also add to global achievements for backward compatibility\n                        if (!achievements.includes('perfect-score')) {\n                            achievements.push('perfect-score');\n                        }\n                        console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType));\n                    }\n                    // Calculate the next level ID - advance to the next level\n                    if (levelId < section.levels.length - 1) {\n                        // Move to the next level in the same section\n                        nextLevelId = levelId + 1;\n                        // Unlock the next level\n                        section.levels[nextLevelId].isLocked = false;\n                    } else if (levelId === section.levels.length - 1) {\n                        section.isCompleted = true;\n                        // Check for \"Section Champion\" achievement\n                        // A section is considered completed when all its levels are completed\n                        const isSectionCompleted = section.levels.every((lvl)=>lvl.isCompleted);\n                        if (isSectionCompleted && !gameTypeAchievements.includes('section-champion')) {\n                            // Add to game-specific achievements\n                            gameTypeAchievements.push('section-champion');\n                            // Also add to global achievements for backward compatibility\n                            if (!achievements.includes('section-champion')) {\n                                achievements.push('section-champion');\n                            }\n                            console.log(\"[Achievement] Unlocked: Section Champion in \".concat(gameType));\n                        }\n                        // Move to the next section if available\n                        if (sectionId < updatedSections.length - 1) {\n                            nextSectionId = sectionId + 1;\n                            nextLevelId = 0; // Start at the first level of the next section\n                            // Unlock the next section\n                            updatedSections[nextSectionId].isLocked = false;\n                            // Unlock the first level of the next section\n                            updatedSections[nextSectionId].levels[0].isLocked = false;\n                        }\n                    }\n                }\n                // Update quest progress for game completion\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    // For the 'perfect-score' quest, count games with a score of at least 100 (including bonuses)\n                    if (quest.id === 'perfect-score' && !quest.isCompleted && score !== undefined && score >= 100) {\n                        const newProgress = Math.min(quest.progress + 1, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                // Calculate XP Master achievement\n                if (gameProgress.xp >= 1000 && !gameTypeAchievements.includes('xp-master')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('xp-master');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('xp-master')) {\n                        achievements.push('xp-master');\n                    }\n                    console.log(\"[Achievement] Unlocked: XP Master in \".concat(gameType));\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Prepare updated state\n                const newState = {\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections,\n                            quests: updatedQuests,\n                            completedLevels,\n                            // Update the current position to the next level\n                            currentSection: nextSectionId,\n                            currentLevel: nextLevelId\n                        }\n                    }\n                };\n                // Log the level transition\n                console.log(\"[Progress] Advanced to Section \".concat(nextSectionId, \", Level \").concat(nextLevelId));\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        canAccessLevel: (gameType, sectionId, levelId)=>{\n            const state = get();\n            // Check if game progress exists\n            if (!state.progress || !state.progress[gameType]) return false;\n            const gameProgress = state.progress[gameType];\n            // Check if sections array exists and sectionId is valid\n            if (!gameProgress.sections || !Array.isArray(gameProgress.sections) || sectionId < 0 || sectionId >= gameProgress.sections.length) {\n                return false;\n            }\n            const section = gameProgress.sections[sectionId];\n            // Check if section is locked\n            if (!section || section.isLocked) return false;\n            // Check if levels array exists and levelId is valid\n            if (!section.levels || !Array.isArray(section.levels) || levelId < 0 || levelId >= section.levels.length) {\n                return false;\n            }\n            const level = section.levels[levelId];\n            // Check if level exists and is not locked\n            return level && !level.isLocked;\n        },\n        unlockSection: (gameType, sectionId)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedSections = [\n                    ...gameProgress.sections\n                ];\n                if (updatedSections[sectionId]) {\n                    updatedSections[sectionId].isLocked = false;\n                    // Also unlock the first level\n                    if (updatedSections[sectionId].levels[0]) {\n                        updatedSections[sectionId].levels[0].isLocked = false;\n                    }\n                }\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        // Daily quests\n        addProgressToQuest: (gameType, questId, amount)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId && !quest.isCompleted) {\n                        const newProgress = Math.min(quest.progress + amount, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        if (!quest.isCompleted && isCompleted) {\n                            (async ()=>{\n                                try {\n                                    const { createXpGrant } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_services_user_xpGrants_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/services/user/xpGrants */ \"(app-pages-browser)/./src/services/user/xpGrants.ts\"));\n                                    await createXpGrant({\n                                        sourceType: 'quest',\n                                        sourceId: \"\".concat(gameType, \":\").concat(quest.id),\n                                        amount: quest.reward\n                                    });\n                                    console.log('[XP] Quest completion grant persisted from store', quest.id);\n                                } catch (e) {\n                                    console.warn('[XP] Failed to persist quest grant from store (queued if offline)', e);\n                                }\n                            })();\n                        }\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeQuest: (gameType, questId)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId) {\n                        if (!quest.isCompleted) {\n                            (async ()=>{\n                                try {\n                                    const { createXpGrant } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_services_user_xpGrants_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/services/user/xpGrants */ \"(app-pages-browser)/./src/services/user/xpGrants.ts\"));\n                                    await createXpGrant({\n                                        sourceType: 'quest',\n                                        sourceId: \"\".concat(gameType, \":\").concat(quest.id),\n                                        amount: quest.reward\n                                    });\n                                    console.log('[XP] Quest completion grant persisted from store (manual complete)', quest.id);\n                                } catch (e) {\n                                    console.warn('[XP] Failed to persist quest grant from store (manual complete)', e);\n                                }\n                            })();\n                        }\n                        return {\n                            ...quest,\n                            progress: quest.target,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        checkAndRefreshQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const today = getTodayDateString();\n                let questsNeedReset = false;\n                // Check if any quests have expired\n                if (gameProgress.quests && Array.isArray(gameProgress.quests)) {\n                    gameProgress.quests.forEach((quest)=>{\n                        // Compare dates in YYYY-MM-DD format (local time)\n                        // If the expiration date is today or earlier, the quest has expired\n                        if (quest.expiresAt <= today) {\n                            questsNeedReset = true;\n                        }\n                    });\n                } else {\n                    // If quests array doesn't exist or is not an array, we need to reset\n                    questsNeedReset = true;\n                }\n                // If quests need to be reset, generate new ones\n                if (questsNeedReset) {\n                    console.log(\"Resetting quests for \".concat(gameType, \" as they have expired\"));\n                    const newState = {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: {\n                                ...gameProgress,\n                                quests: generateDailyQuests()\n                            }\n                        }\n                    };\n                    // Save to Firebase after updating local state\n                    setTimeout(()=>get().saveUserProgress(), 0);\n                    return newState;\n                }\n                return state;\n            });\n        },\n        resetQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Generate fresh quests\n                const freshQuests = generateDailyQuests();\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: freshQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeStreakBonusQuest: (gameType)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === 'streak-bonus' && !quest.isCompleted) {\n                        return {\n                            ...quest,\n                            progress: 1,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        // Challenge tracking\n        addChallengeResult: (result)=>{\n            set((state)=>{\n                const newChallenges = [\n                    ...state.recentChallenges,\n                    result\n                ];\n                // Cap at 50 challenges to prevent document size issues\n                const cappedChallenges = newChallenges.slice(-50);\n                return {\n                    recentChallenges: cappedChallenges\n                };\n            });\n        },\n        // Check if streak should be reset\n        checkStreakReset: ()=>{\n            set((state)=>{\n                console.log('[StreakCheck] Current state:', {\n                    streak: state.streak,\n                    lastStreakDate: state.lastStreakDate,\n                    streakState: state.streakState\n                });\n                // If there's no last streak date, no need to check\n                if (!state.lastStreakDate) {\n                    console.log('[StreakCheck] No last streak date, setting to none');\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                const today = getTodayDateString();\n                // If they already played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played today, keeping streak active');\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // If they last played yesterday, streak is valid but inactive\n                if (isConsecutiveDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played yesterday, streak inactive but valid');\n                    return {\n                        ...state,\n                        streakState: 'inactive'\n                    };\n                }\n                // If it's been more than a day since last play, reset streak\n                console.log('[StreakCheck] Resetting streak due to inactivity');\n                return {\n                    ...state,\n                    streak: 0,\n                    streakState: 'none'\n                };\n            });\n        },\n        checkStreakStatus: ()=>{\n            set((state)=>{\n                const today = getTodayDateString();\n                // If no streak, status is \"none\"\n                if (state.streak === 0) {\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                // If played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Otherwise, streak exists but is inactive\n                return {\n                    ...state,\n                    streakState: 'inactive'\n                };\n            });\n        },\n        // Complete a game and handle streak/XP tracking\n        completeGame: (gameType, score, isCorrect)=>set((state)=>{\n                if (!gameType) return state;\n                console.log(\"[GameDB] Completing game: \".concat(gameType, \", Score: \").concat(score, \", Correct: \").concat(isCorrect));\n                // Update the last played timestamp\n                const gameProgress = state.progress[gameType] || {\n                    sections: generateSections(),\n                    xp: 0,\n                    quests: generateDailyQuests(),\n                    currentSection: 0,\n                    currentLevel: 0,\n                    completedLevels: [],\n                    lastPlayedAt: ''\n                };\n                // Create updated game progress with timestamp\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    lastPlayedAt: new Date().toISOString()\n                };\n                // Update streak handling - IMPORTANT: streak is not reset on wrong answers\n                // It only updates (increases) when it's the first correct answer of a new day\n                const today = getTodayDateString();\n                const streakUpdates = {};\n                // Only consider streak updates for correct answers\n                if (isCorrect) {\n                    if (state.lastStreakDate !== today) {\n                        // This is the first correct answer of a new day - increase streak\n                        streakUpdates.streak = state.streak + 1;\n                        streakUpdates.lastStreakDate = today;\n                        streakUpdates.streakState = 'active';\n                        console.log(\"[GameDB] Increasing streak to \".concat(streakUpdates.streak, \" (first correct answer today)\"));\n                    } else {\n                        // Already played today and got something correct - streak remains active\n                        streakUpdates.streakState = 'active';\n                    }\n                }\n                // Update achievements - track each game type separately\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Check for \"First Steps\" achievement - completing any game\n                if (!gameTypeAchievements.includes('first-steps')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('first-steps');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('first-steps')) {\n                        achievements.push('first-steps');\n                    }\n                    console.log(\"[Achievement] Unlocked: First Steps in \".concat(gameType, \" - Completed your first game!\"));\n                }\n                // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('perfect-score');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('perfect-score')) {\n                        achievements.push('perfect-score');\n                    }\n                    console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType, \" - Scored 100% or higher!\"));\n                }\n                // Check for \"Streak Master\" achievement - maintain a 7-day streak\n                // Note: Streak Master is a global achievement, not game-specific\n                if (streakUpdates.streak !== undefined && streakUpdates.streak >= 7 && !achievements.includes('streak-master')) {\n                    // Add directly to global achievements\n                    achievements.push('streak-master');\n                    // But also add to game-specific achievements for the current game type\n                    if (!gameTypeAchievements.includes('streak-master')) {\n                        gameTypeAchievements.push('streak-master');\n                    }\n                    console.log('[Achievement] Unlocked: Streak Master - Maintained a 7-day streak!');\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Update progress with the game progress\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: updatedGameProgress\n                };\n                // Create a challenge result record\n                const challengeResult = {\n                    id: \"\".concat(gameType, \"-\").concat(Date.now()),\n                    challengeType: gameType,\n                    score,\n                    maxScore: 100,\n                    completedAt: new Date().toISOString(),\n                    duration: 0,\n                    isCorrect,\n                    gameType\n                };\n                // Add to recent challenges\n                const updatedRecentChallenges = [\n                    ...state.recentChallenges,\n                    challengeResult\n                ];\n                // Create the final state updates\n                const gameUpdates = {\n                    progress: updatedProgress,\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    totalChallengesCompleted: state.totalChallengesCompleted + 1,\n                    recentChallenges: updatedRecentChallenges,\n                    ...streakUpdates\n                };\n                // Save to database\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return gameUpdates;\n            }),\n        // Save user progress to database with better error handling\n        saveUserProgress: async ()=>{\n            const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser;\n            if (!user) {\n                console.error('[Database] Cannot save: No authenticated user');\n                return;\n            }\n            try {\n                console.log('[Database] Saving user progress to Firestore...');\n                // Get the user document reference\n                const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, GAME_PROGRESS_COLLECTION, user.uid);\n                // Prepare data to save - ensure all fields exist\n                const dataToSave = {\n                    // User profile\n                    profile: get().profile,\n                    // Game statistics\n                    score: get().score || 0,\n                    streak: get().streak || 0,\n                    lastStreakDate: get().lastStreakDate || '',\n                    streakState: get().streakState || 'none',\n                    totalChallengesCompleted: get().totalChallengesCompleted || 0,\n                    // Achievements\n                    achievements: get().achievements || [],\n                    gameAchievements: get().gameAchievements || {},\n                    // Challenge history\n                    recentChallenges: get().recentChallenges || [],\n                    // Game progress data\n                    progress: get().progress || {},\n                    // Metadata\n                    updatedAt: new Date().toISOString()\n                };\n                // Log a summary of what's being saved\n                console.log(\"[Database] Saving - Score: \".concat(dataToSave.score, \", Streak: \").concat(dataToSave.streak, \", Achievements: \").concat(dataToSave.achievements.length));\n                // Deep clone to avoid Firebase warnings about objects with custom prototypes\n                const cleanData = JSON.parse(JSON.stringify(dataToSave));\n                // Use merge to avoid overwriting any fields not included in current state\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userProgressRef, cleanData, {\n                    merge: true\n                });\n                console.log('[Database] Successfully saved user progress to Firestore');\n            } catch (error) {\n                console.error('[Database] Error saving user progress:', error);\n                // Try to save again after a delay\n                setTimeout(()=>{\n                    console.log('[Database] Retrying failed save operation...');\n                    get().saveUserProgress();\n                }, 3000);\n            }\n        },\n        // User-specific progress\n        loadUserProgress: async ()=>{\n            const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser;\n            if (!user) {\n                console.log('[Auth] No authenticated user found when trying to load progress');\n                return;\n            }\n            try {\n                console.log(\"[Auth] Loading progress for user: \".concat(user.uid));\n                const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, GAME_PROGRESS_COLLECTION, user.uid);\n                const userProgressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userProgressRef);\n                if (userProgressDoc.exists()) {\n                    const data = userProgressDoc.data();\n                    set((state)=>({\n                            ...state,\n                            profile: data.profile || null,\n                            score: data.score || 0,\n                            streak: data.streak || 0,\n                            lastStreakDate: data.lastStreakDate || '',\n                            streakState: data.streakState || 'none',\n                            totalChallengesCompleted: data.totalChallengesCompleted || 0,\n                            achievements: data.achievements || [],\n                            gameAchievements: data.gameAchievements || {},\n                            recentChallenges: data.recentChallenges || [],\n                            progress: data.progress || {}\n                        }));\n                    console.log('[Auth] Successfully loaded user progress from Firestore');\n                } else {\n                    console.log('[Auth] No saved progress found for user. Initializing new progress.');\n                    // Create initial game progress structure\n                    const initialProgress = {\n                        'make-sentence': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        },\n                        'multiple-choice': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    };\n                    // First, unlock the first level of each game type\n                    for (const gameType of Object.keys(initialProgress)){\n                        if (initialProgress[gameType].sections.length > 0) {\n                            initialProgress[gameType].sections[0].isLocked = false;\n                            if (initialProgress[gameType].sections[0].levels.length > 0) {\n                                initialProgress[gameType].sections[0].levels[0].isLocked = false;\n                            }\n                        }\n                    }\n                    // Create initial user profile\n                    const initialProfile = {\n                        displayName: user.displayName,\n                        email: user.email,\n                        photoURL: user.photoURL,\n                        joinDate: new Date().toISOString(),\n                        lastActiveDate: new Date().toISOString(),\n                        gradeLevel: null,\n                        preferences: {\n                            emailNotifications: false,\n                            dailyReminder: true\n                        }\n                    };\n                    // Create initial state to update locally\n                    const newUserData = {\n                        profile: initialProfile,\n                        score: 0,\n                        streak: 0,\n                        lastStreakDate: '',\n                        streakState: 'none',\n                        totalChallengesCompleted: 0,\n                        achievements: [],\n                        gameAchievements: {},\n                        recentChallenges: [],\n                        progress: initialProgress,\n                        createdAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString(),\n                        userId: user.uid\n                    };\n                    // Update local state\n                    set((state)=>({\n                            ...state,\n                            ...newUserData\n                        }));\n                    // IMPORTANT: Save the initial data to Firestore immediately\n                    // This ensures the user has a gameProgress document from the start\n                    try {\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userProgressRef, newUserData);\n                        console.log('[Auth] Successfully created new user progress document in Firestore');\n                    } catch (error) {\n                        console.error('[Auth] Error creating initial progress document:', error);\n                    }\n                }\n                // Check if streak should be reset after loading data\n                get().checkStreakReset();\n            } catch (error) {\n                console.error('[Auth] Error loading user progress:', error);\n            }\n        },\n        // Ensure game progress exists for a given game type\n        ensureGameProgressExists: (gameType)=>{\n            set((state)=>{\n                if (!state.progress[gameType]) {\n                    const newProgress = {\n                        sections: generateSections(),\n                        xp: 0,\n                        quests: generateDailyQuests(),\n                        currentSection: 0,\n                        currentLevel: 0,\n                        completedLevels: []\n                    };\n                    return {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: newProgress\n                        }\n                    };\n                }\n                return state;\n            });\n        },\n        // Profile management\n        updateUserProfile: (updates)=>{\n            set((state)=>({\n                    profile: {\n                        ...state.profile,\n                        ...updates\n                    }\n                }));\n        }\n    }), {\n    name: 'game-storage',\n    // Don't persist user progress from localStorage to avoid hydration issues\n    partialize: (state)=>({}),\n    // Only enable storage on the client side\n    skipHydration: true\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/gameStore.ts\n"));

/***/ })

});