"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./src/store/gameStore.ts":
/*!********************************!*\
  !*** ./src/store/gameStore.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameStore: () => (/* binding */ useGameStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n// src/store/gameStore.ts\n\n\n\n\n\n// Helper to get today's date as ISO string for consistency\nconst getTodayDateString = ()=>{\n    // Use consistent ISO format for all dates\n    return new Date().toISOString();\n};\n// Helper to check if two dates are consecutive days\nconst isConsecutiveDay = (previousDate, currentDate)=>{\n    if (!previousDate) return false;\n    // Parse dates (using Date constructor with YYYY-MM-DD format)\n    const prev = new Date(previousDate);\n    const curr = new Date(currentDate);\n    // Set to same time to compare just the dates\n    prev.setHours(0, 0, 0, 0);\n    curr.setHours(0, 0, 0, 0);\n    // Calculate difference in days\n    const timeDiff = curr.getTime() - prev.getTime();\n    const daysDiff = timeDiff / (1000 * 3600 * 24);\n    // Return true if the dates are exactly 1 day apart\n    return Math.round(daysDiff) === 1;\n};\n// Helper to check if dates are the same day\nconst isSameDay = (dateStr1, dateStr2)=>{\n    if (!dateStr1 || !dateStr2) return false;\n    return dateStr1 === dateStr2;\n};\n// Helper to get tomorrow's date as ISO string for consistency\nconst getTomorrowDateString = ()=>{\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString();\n};\n// Generate sections with levels\nconst generateSections = function() {\n    let count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5, levelsPerSection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n    return Array.from({\n        length: count\n    }).map((_, sectionIndex)=>({\n            id: sectionIndex,\n            title: \"Section \".concat(sectionIndex + 1),\n            description: \"Complete all levels in Section \".concat(sectionIndex + 1),\n            isLocked: sectionIndex !== 0,\n            isCompleted: false,\n            levels: Array.from({\n                length: levelsPerSection\n            }).map((_, levelIndex)=>({\n                    id: levelIndex,\n                    title: \"Level \".concat(levelIndex + 1),\n                    isLocked: levelIndex !== 0,\n                    isCompleted: false,\n                    bestScore: 0,\n                    attempts: 0,\n                    lastPlayed: null\n                }))\n        }));\n};\n// Generate daily quests\nconst generateDailyQuests = ()=>{\n    // Get tomorrow's date in YYYY-MM-DD format (using local time)\n    const expiresAt = getTomorrowDateString();\n    return [\n        {\n            id: 'streak-bonus',\n            title: 'Get 3 Correct in a Row',\n            description: 'Answer three questions correctly in a row',\n            reward: 10,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'complete-games',\n            title: 'Complete 3 Games',\n            description: 'Complete any 3 games today (any score)',\n            reward: 15,\n            progress: 0,\n            target: 3,\n            isCompleted: false,\n            expiresAt\n        },\n        {\n            id: 'perfect-score',\n            title: 'Perfect Score',\n            description: 'Complete a level with a perfect score',\n            reward: 20,\n            progress: 0,\n            target: 1,\n            isCompleted: false,\n            expiresAt\n        }\n    ];\n};\n// Collection name for user game progress\nconst GAME_PROGRESS_COLLECTION = 'gameProgress';\nconst useGameStore = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_3__.persist)((set, get)=>({\n        // Initial state\n        profile: null,\n        score: 0,\n        streak: 0,\n        lastStreakDate: '',\n        streakState: 'none',\n        totalChallengesCompleted: 0,\n        progress: {},\n        achievements: [],\n        gameAchievements: {},\n        recentChallenges: [],\n        // Basic game actions\n        addPoints: (points, gameType)=>set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                console.log(\"[XP Debug] Adding \".concat(points, \" points to \").concat(gameType));\n                console.log(\"[XP Debug] Current XP: \".concat(gameProgress.xp));\n                // Prevent negative XP - calculate new XP ensuring it doesn't go below 0\n                const newXP = Math.max(0, gameProgress.xp + points);\n                // Update XP for the specific game type\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    xp: newXP\n                };\n                console.log(\"[XP Debug] New total XP: \".concat(updatedGameProgress.xp));\n                // Update daily quest progress for XP - DIRECTLY use the game's total XP value for consistency\n                const updatedQuests = gameProgress.quests;\n                const newState = {\n                    score: state.score + points,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...updatedGameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        increaseStreak: ()=>set((state)=>{\n                const today = getTodayDateString();\n                let newStreak = state.streak;\n                // Case 1: Already logged streak today - don't increase, just make active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Case 2: First time playing or continuing streak from yesterday\n                if (isConsecutiveDay(state.lastStreakDate, today) || !state.lastStreakDate) {\n                    newStreak += 1;\n                } else {\n                    newStreak = 1; // Start a new streak\n                }\n                const newState = {\n                    streak: newStreak,\n                    lastStreakDate: today,\n                    streakState: 'active'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        resetStreak: ()=>set((state)=>{\n                const newState = {\n                    streak: 0,\n                    lastStreakDate: '',\n                    streakState: 'none'\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            }),\n        // Progress tracking\n        initializeGameProgress: (gameType)=>{\n            set((state)=>{\n                // Check if progress already exists for this game type\n                if (state.progress[gameType] && state.progress[gameType].sections && state.progress[gameType].sections.length > 0) {\n                    console.log(\"Game progress for \".concat(gameType, \" already initialized.\"));\n                    return state;\n                }\n                console.log(\"Initializing game progress for \".concat(gameType));\n                // Default sections with 5 sections and 5 levels each\n                const sections = generateSections();\n                // First section and first level are always unlocked\n                if (sections.length > 0) {\n                    sections[0].isLocked = false;\n                    if (sections[0].levels && sections[0].levels.length > 0) {\n                        sections[0].levels[0].isLocked = false;\n                    }\n                }\n                // Generate fresh daily quests if needed\n                const quests = generateDailyQuests();\n                return {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            sections,\n                            xp: 0,\n                            quests,\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    }\n                };\n            });\n        },\n        completeLevel: (gameType, sectionId, levelId, score)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Create a deep copy of sections\n                const updatedSections = JSON.parse(JSON.stringify(gameProgress.sections));\n                // Get the section and level\n                const section = updatedSections[sectionId];\n                if (!section || !section.levels[levelId]) return state;\n                // Update level stats - this happens regardless of score\n                const level = section.levels[levelId];\n                level.attempts = (level.attempts || 0) + 1;\n                level.lastPlayed = new Date().toISOString();\n                // Store the best score if higher than previous\n                if (score !== undefined && (level.bestScore === undefined || score > level.bestScore)) {\n                    level.bestScore = score;\n                }\n                // Create a unique ID for this level to track completion\n                const levelKey = \"\".concat(sectionId, \"-\").concat(levelId);\n                // Track completed levels for summary stats\n                let completedLevels = [\n                    ...gameProgress.completedLevels || []\n                ];\n                // Get achievements arrays\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Track where the user should go next (current position)\n                let nextSectionId = sectionId;\n                let nextLevelId = levelId;\n                // Mark level as completed if score is at least 80% (threshold for completing a level)\n                const isLevelCompleted = score !== undefined && score >= 80;\n                if (isLevelCompleted) {\n                    // Mark the level as completed\n                    level.isCompleted = true;\n                    // Add to completed levels array if not already there\n                    if (!completedLevels.includes(levelKey)) {\n                        completedLevels.push(levelKey);\n                    }\n                    // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                    if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                        // Add to game-specific achievements\n                        gameTypeAchievements.push('perfect-score');\n                        // Also add to global achievements for backward compatibility\n                        if (!achievements.includes('perfect-score')) {\n                            achievements.push('perfect-score');\n                        }\n                        console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType));\n                    }\n                    // Calculate the next level ID - advance to the next level\n                    if (levelId < section.levels.length - 1) {\n                        // Move to the next level in the same section\n                        nextLevelId = levelId + 1;\n                        // Unlock the next level\n                        section.levels[nextLevelId].isLocked = false;\n                    } else if (levelId === section.levels.length - 1) {\n                        section.isCompleted = true;\n                        // Check for \"Section Champion\" achievement\n                        // A section is considered completed when all its levels are completed\n                        const isSectionCompleted = section.levels.every((lvl)=>lvl.isCompleted);\n                        if (isSectionCompleted && !gameTypeAchievements.includes('section-champion')) {\n                            // Add to game-specific achievements\n                            gameTypeAchievements.push('section-champion');\n                            // Also add to global achievements for backward compatibility\n                            if (!achievements.includes('section-champion')) {\n                                achievements.push('section-champion');\n                            }\n                            console.log(\"[Achievement] Unlocked: Section Champion in \".concat(gameType));\n                        }\n                        // Move to the next section if available\n                        if (sectionId < updatedSections.length - 1) {\n                            nextSectionId = sectionId + 1;\n                            nextLevelId = 0; // Start at the first level of the next section\n                            // Unlock the next section\n                            updatedSections[nextSectionId].isLocked = false;\n                            // Unlock the first level of the next section\n                            updatedSections[nextSectionId].levels[0].isLocked = false;\n                        }\n                    }\n                }\n                // Update quest progress for game completion\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    // For the 'perfect-score' quest, count games with a score of at least 100 (including bonuses)\n                    if (quest.id === 'perfect-score' && !quest.isCompleted && score !== undefined && score >= 100) {\n                        const newProgress = Math.min(quest.progress + 1, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                // Calculate XP Master achievement\n                if (gameProgress.xp >= 1000 && !gameTypeAchievements.includes('xp-master')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('xp-master');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('xp-master')) {\n                        achievements.push('xp-master');\n                    }\n                    console.log(\"[Achievement] Unlocked: XP Master in \".concat(gameType));\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Prepare updated state\n                const newState = {\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections,\n                            quests: updatedQuests,\n                            completedLevels,\n                            // Update the current position to the next level\n                            currentSection: nextSectionId,\n                            currentLevel: nextLevelId\n                        }\n                    }\n                };\n                // Log the level transition\n                console.log(\"[Progress] Advanced to Section \".concat(nextSectionId, \", Level \").concat(nextLevelId));\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        canAccessLevel: (gameType, sectionId, levelId)=>{\n            const state = get();\n            // Check if game progress exists\n            if (!state.progress || !state.progress[gameType]) return false;\n            const gameProgress = state.progress[gameType];\n            // Check if sections array exists and sectionId is valid\n            if (!gameProgress.sections || !Array.isArray(gameProgress.sections) || sectionId < 0 || sectionId >= gameProgress.sections.length) {\n                return false;\n            }\n            const section = gameProgress.sections[sectionId];\n            // Check if section is locked\n            if (!section || section.isLocked) return false;\n            // Check if levels array exists and levelId is valid\n            if (!section.levels || !Array.isArray(section.levels) || levelId < 0 || levelId >= section.levels.length) {\n                return false;\n            }\n            const level = section.levels[levelId];\n            // Check if level exists and is not locked\n            return level && !level.isLocked;\n        },\n        unlockSection: (gameType, sectionId)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedSections = [\n                    ...gameProgress.sections\n                ];\n                if (updatedSections[sectionId]) {\n                    updatedSections[sectionId].isLocked = false;\n                    // Also unlock the first level\n                    if (updatedSections[sectionId].levels[0]) {\n                        updatedSections[sectionId].levels[0].isLocked = false;\n                    }\n                }\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            sections: updatedSections\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        // Daily quests\n        addProgressToQuest: (gameType, questId, amount)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId && !quest.isCompleted) {\n                        const newProgress = Math.min(quest.progress + amount, quest.target);\n                        const isCompleted = newProgress >= quest.target;\n                        // When a quest completes, it automatically gives its reward\n                        if (isCompleted && !quest.isCompleted) {\n                            console.log(\"Quest \".concat(quest.title, \" completed! Reward: \").concat(quest.reward, \" XP\"));\n                            // This is where the extra XP is coming from - automatic quest rewards\n                            setTimeout(()=>get().addPoints(quest.reward, gameType), 0);\n                        }\n                        return {\n                            ...quest,\n                            progress: newProgress,\n                            isCompleted\n                        };\n                    }\n                    return quest;\n                });\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: updatedQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeQuest: (gameType, questId)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === questId) {\n                        // Give XP reward for completing the quest\n                        if (!quest.isCompleted) {\n                            setTimeout(()=>get().addPoints(quest.reward, gameType), 0);\n                        }\n                        return {\n                            ...quest,\n                            progress: quest.target,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        checkAndRefreshQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                const today = getTodayDateString();\n                let questsNeedReset = false;\n                // Check if any quests have expired\n                if (gameProgress.quests && Array.isArray(gameProgress.quests)) {\n                    gameProgress.quests.forEach((quest)=>{\n                        // Compare dates in YYYY-MM-DD format (local time)\n                        // If the expiration date is today or earlier, the quest has expired\n                        if (quest.expiresAt <= today) {\n                            questsNeedReset = true;\n                        }\n                    });\n                } else {\n                    // If quests array doesn't exist or is not an array, we need to reset\n                    questsNeedReset = true;\n                }\n                // If quests need to be reset, generate new ones\n                if (questsNeedReset) {\n                    console.log(\"Resetting quests for \".concat(gameType, \" as they have expired\"));\n                    const newState = {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: {\n                                ...gameProgress,\n                                quests: generateDailyQuests()\n                            }\n                        }\n                    };\n                    // Save to Firebase after updating local state\n                    setTimeout(()=>get().saveUserProgress(), 0);\n                    return newState;\n                }\n                return state;\n            });\n        },\n        resetQuests: (gameType)=>{\n            set((state)=>{\n                const gameProgress = state.progress[gameType];\n                if (!gameProgress) return state;\n                // Generate fresh quests\n                const freshQuests = generateDailyQuests();\n                const newState = {\n                    progress: {\n                        ...state.progress,\n                        [gameType]: {\n                            ...gameProgress,\n                            quests: freshQuests\n                        }\n                    }\n                };\n                // Save to Firebase after updating local state\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return newState;\n            });\n        },\n        completeStreakBonusQuest: (gameType)=>{\n            set((state)=>{\n                // Skip if no progress data for this game type\n                if (!state.progress || !state.progress[gameType]) return state;\n                // Get the quests for this specific game type\n                const gameProgress = state.progress[gameType];\n                // Update only the streak-bonus quest for this game type\n                const updatedQuests = gameProgress.quests.map((quest)=>{\n                    if (quest.id === 'streak-bonus' && !quest.isCompleted) {\n                        return {\n                            ...quest,\n                            progress: 1,\n                            isCompleted: true\n                        };\n                    }\n                    return quest;\n                });\n                // Create the updated progress for just this game type\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: {\n                        ...gameProgress,\n                        quests: updatedQuests\n                    }\n                };\n                // Save to Firebase after updating\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return {\n                    progress: updatedProgress\n                };\n            });\n        },\n        // Challenge tracking\n        addChallengeResult: (result)=>{\n            set((state)=>{\n                const newChallenges = [\n                    ...state.recentChallenges,\n                    result\n                ];\n                // Cap at 50 challenges to prevent document size issues\n                const cappedChallenges = newChallenges.slice(-50);\n                return {\n                    recentChallenges: cappedChallenges\n                };\n            });\n        },\n        // Check if streak should be reset\n        checkStreakReset: ()=>{\n            set((state)=>{\n                console.log('[StreakCheck] Current state:', {\n                    streak: state.streak,\n                    lastStreakDate: state.lastStreakDate,\n                    streakState: state.streakState\n                });\n                // If there's no last streak date, no need to check\n                if (!state.lastStreakDate) {\n                    console.log('[StreakCheck] No last streak date, setting to none');\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                const today = getTodayDateString();\n                // If they already played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played today, keeping streak active');\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // If they last played yesterday, streak is valid but inactive\n                if (isConsecutiveDay(state.lastStreakDate, today)) {\n                    console.log('[StreakCheck] Played yesterday, streak inactive but valid');\n                    return {\n                        ...state,\n                        streakState: 'inactive'\n                    };\n                }\n                // If it's been more than a day since last play, reset streak\n                console.log('[StreakCheck] Resetting streak due to inactivity');\n                return {\n                    ...state,\n                    streak: 0,\n                    streakState: 'none'\n                };\n            });\n        },\n        checkStreakStatus: ()=>{\n            set((state)=>{\n                const today = getTodayDateString();\n                // If no streak, status is \"none\"\n                if (state.streak === 0) {\n                    return {\n                        ...state,\n                        streakState: 'none'\n                    };\n                }\n                // If played today, streak is active\n                if (isSameDay(state.lastStreakDate, today)) {\n                    return {\n                        ...state,\n                        streakState: 'active'\n                    };\n                }\n                // Otherwise, streak exists but is inactive\n                return {\n                    ...state,\n                    streakState: 'inactive'\n                };\n            });\n        },\n        // Complete a game and handle streak/XP tracking\n        completeGame: (gameType, score, isCorrect)=>set((state)=>{\n                if (!gameType) return state;\n                console.log(\"[GameDB] Completing game: \".concat(gameType, \", Score: \").concat(score, \", Correct: \").concat(isCorrect));\n                // Update the last played timestamp\n                const gameProgress = state.progress[gameType] || {\n                    sections: generateSections(),\n                    xp: 0,\n                    quests: generateDailyQuests(),\n                    currentSection: 0,\n                    currentLevel: 0,\n                    completedLevels: [],\n                    lastPlayedAt: ''\n                };\n                // Create updated game progress with timestamp\n                const updatedGameProgress = {\n                    ...gameProgress,\n                    lastPlayedAt: new Date().toISOString()\n                };\n                // Update streak handling - IMPORTANT: streak is not reset on wrong answers\n                // It only updates (increases) when it's the first correct answer of a new day\n                const today = getTodayDateString();\n                const streakUpdates = {};\n                // Only consider streak updates for correct answers\n                if (isCorrect) {\n                    if (state.lastStreakDate !== today) {\n                        // This is the first correct answer of a new day - increase streak\n                        streakUpdates.streak = state.streak + 1;\n                        streakUpdates.lastStreakDate = today;\n                        streakUpdates.streakState = 'active';\n                        console.log(\"[GameDB] Increasing streak to \".concat(streakUpdates.streak, \" (first correct answer today)\"));\n                    } else {\n                        // Already played today and got something correct - streak remains active\n                        streakUpdates.streakState = 'active';\n                    }\n                }\n                // Update achievements - track each game type separately\n                let achievements = [\n                    ...state.achievements || []\n                ];\n                let gameTypeAchievements = [\n                    ...state.gameAchievements[gameType] || []\n                ];\n                // Check for \"First Steps\" achievement - completing any game\n                if (!gameTypeAchievements.includes('first-steps')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('first-steps');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('first-steps')) {\n                        achievements.push('first-steps');\n                    }\n                    console.log(\"[Achievement] Unlocked: First Steps in \".concat(gameType, \" - Completed your first game!\"));\n                }\n                // Check for \"Perfect Score\" achievement - score must be at least 100 (including bonuses)\n                if (score >= 100 && !gameTypeAchievements.includes('perfect-score')) {\n                    // Add to game-specific achievements\n                    gameTypeAchievements.push('perfect-score');\n                    // Also add to global achievements for backward compatibility\n                    if (!achievements.includes('perfect-score')) {\n                        achievements.push('perfect-score');\n                    }\n                    console.log(\"[Achievement] Unlocked: Perfect Score in \".concat(gameType, \" - Scored 100% or higher!\"));\n                }\n                // Check for \"Streak Master\" achievement - maintain a 7-day streak\n                // Note: Streak Master is a global achievement, not game-specific\n                if (streakUpdates.streak !== undefined && streakUpdates.streak >= 7 && !achievements.includes('streak-master')) {\n                    // Add directly to global achievements\n                    achievements.push('streak-master');\n                    // But also add to game-specific achievements for the current game type\n                    if (!gameTypeAchievements.includes('streak-master')) {\n                        gameTypeAchievements.push('streak-master');\n                    }\n                    console.log('[Achievement] Unlocked: Streak Master - Maintained a 7-day streak!');\n                }\n                // Prepare updated gameAchievements object\n                const updatedGameAchievements = {\n                    ...state.gameAchievements,\n                    [gameType]: gameTypeAchievements\n                };\n                // Update progress with the game progress\n                const updatedProgress = {\n                    ...state.progress,\n                    [gameType]: updatedGameProgress\n                };\n                // Create a challenge result record\n                const challengeResult = {\n                    id: \"\".concat(gameType, \"-\").concat(Date.now()),\n                    challengeType: gameType,\n                    score,\n                    maxScore: 100,\n                    completedAt: new Date().toISOString(),\n                    duration: 0,\n                    isCorrect,\n                    gameType\n                };\n                // Add to recent challenges\n                const updatedRecentChallenges = [\n                    ...state.recentChallenges,\n                    challengeResult\n                ];\n                // Create the final state updates\n                const gameUpdates = {\n                    progress: updatedProgress,\n                    achievements,\n                    gameAchievements: updatedGameAchievements,\n                    totalChallengesCompleted: state.totalChallengesCompleted + 1,\n                    recentChallenges: updatedRecentChallenges,\n                    ...streakUpdates\n                };\n                // Save to database\n                setTimeout(()=>get().saveUserProgress(), 0);\n                return gameUpdates;\n            }),\n        // Save user progress to database - disabled to avoid conflicts with useGameProgress\n        // All writes should go through src/hooks/useGameProgress.ts for a single source of truth\n        saveUserProgress: async ()=>{\n            // No-op: prevent overwriting XP and quests written by useGameProgress\n            return;\n        },\n        // User-specific progress\n        loadUserProgress: async ()=>{\n            const user = _lib_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser;\n            if (!user) {\n                console.log('[Auth] No authenticated user found when trying to load progress');\n                return;\n            }\n            try {\n                console.log(\"[Auth] Loading progress for user: \".concat(user.uid));\n                const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, GAME_PROGRESS_COLLECTION, user.uid);\n                const userProgressDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userProgressRef);\n                if (userProgressDoc.exists()) {\n                    const data = userProgressDoc.data();\n                    set((state)=>({\n                            ...state,\n                            profile: data.profile || null,\n                            score: data.score || 0,\n                            streak: data.streak || 0,\n                            lastStreakDate: data.lastStreakDate || '',\n                            streakState: data.streakState || 'none',\n                            totalChallengesCompleted: data.totalChallengesCompleted || 0,\n                            achievements: data.achievements || [],\n                            gameAchievements: data.gameAchievements || {},\n                            recentChallenges: data.recentChallenges || [],\n                            progress: data.progress || {}\n                        }));\n                    console.log('[Auth] Successfully loaded user progress from Firestore');\n                } else {\n                    console.log('[Auth] No saved progress found for user. Initializing new progress.');\n                    // Create initial game progress structure\n                    const initialProgress = {\n                        'make-sentence': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        },\n                        'multiple-choice': {\n                            sections: generateSections(),\n                            xp: 0,\n                            quests: generateDailyQuests(),\n                            currentSection: 0,\n                            currentLevel: 0,\n                            completedLevels: []\n                        }\n                    };\n                    // First, unlock the first level of each game type\n                    for (const gameType of Object.keys(initialProgress)){\n                        if (initialProgress[gameType].sections.length > 0) {\n                            initialProgress[gameType].sections[0].isLocked = false;\n                            if (initialProgress[gameType].sections[0].levels.length > 0) {\n                                initialProgress[gameType].sections[0].levels[0].isLocked = false;\n                            }\n                        }\n                    }\n                    // Create initial user profile\n                    const initialProfile = {\n                        displayName: user.displayName,\n                        email: user.email,\n                        photoURL: user.photoURL,\n                        joinDate: new Date().toISOString(),\n                        lastActiveDate: new Date().toISOString(),\n                        gradeLevel: null,\n                        preferences: {\n                            emailNotifications: false,\n                            dailyReminder: true\n                        }\n                    };\n                    // Create initial state to update locally\n                    const newUserData = {\n                        profile: initialProfile,\n                        score: 0,\n                        streak: 0,\n                        lastStreakDate: '',\n                        streakState: 'none',\n                        totalChallengesCompleted: 0,\n                        achievements: [],\n                        gameAchievements: {},\n                        recentChallenges: [],\n                        progress: initialProgress,\n                        createdAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString(),\n                        userId: user.uid\n                    };\n                    // Update local state\n                    set((state)=>({\n                            ...state,\n                            ...newUserData\n                        }));\n                    // IMPORTANT: Save the initial data to Firestore immediately\n                    // This ensures the user has a gameProgress document from the start\n                    try {\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userProgressRef, newUserData);\n                        console.log('[Auth] Successfully created new user progress document in Firestore');\n                    } catch (error) {\n                        console.error('[Auth] Error creating initial progress document:', error);\n                    }\n                }\n                // Check if streak should be reset after loading data\n                get().checkStreakReset();\n            } catch (error) {\n                console.error('[Auth] Error loading user progress:', error);\n            }\n        },\n        // Ensure game progress exists for a given game type\n        ensureGameProgressExists: (gameType)=>{\n            set((state)=>{\n                if (!state.progress[gameType]) {\n                    const newProgress = {\n                        sections: generateSections(),\n                        xp: 0,\n                        quests: generateDailyQuests(),\n                        currentSection: 0,\n                        currentLevel: 0,\n                        completedLevels: []\n                    };\n                    return {\n                        progress: {\n                            ...state.progress,\n                            [gameType]: newProgress\n                        }\n                    };\n                }\n                return state;\n            });\n        },\n        // Profile management\n        updateUserProfile: (updates)=>{\n            set((state)=>({\n                    profile: {\n                        ...state.profile,\n                        ...updates\n                    }\n                }));\n        }\n    }), {\n    name: 'game-storage',\n    // Don't persist user progress from localStorage to avoid hydration issues\n    partialize: (state)=>({}),\n    // Only enable storage on the client side\n    skipHydration: true\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zdG9yZS9nYW1lU3RvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSx5QkFBeUI7QUFDUTtBQUNZO0FBQ29DO0FBQzdDO0FBQ0U7QUE2SXRDLDJEQUEyRDtBQUMzRCxNQUFNTyxxQkFBcUI7SUFDekIsMENBQTBDO0lBQzFDLE9BQU8sSUFBSUMsT0FBT0MsV0FBVztBQUMvQjtBQUVBLG9EQUFvRDtBQUNwRCxNQUFNQyxtQkFBbUIsQ0FBQ0MsY0FBc0JDO0lBQzlDLElBQUksQ0FBQ0QsY0FBYyxPQUFPO0lBRTFCLDhEQUE4RDtJQUM5RCxNQUFNRSxPQUFPLElBQUlMLEtBQUtHO0lBQ3RCLE1BQU1HLE9BQU8sSUFBSU4sS0FBS0k7SUFFdEIsNkNBQTZDO0lBQzdDQyxLQUFLRSxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUc7SUFDdkJELEtBQUtDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRztJQUV2QiwrQkFBK0I7SUFDL0IsTUFBTUMsV0FBV0YsS0FBS0csT0FBTyxLQUFLSixLQUFLSSxPQUFPO0lBQzlDLE1BQU1DLFdBQVdGLFdBQVksUUFBTyxPQUFPLEVBQUM7SUFFNUMsbURBQW1EO0lBQ25ELE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0YsY0FBYztBQUNsQztBQUVBLDRDQUE0QztBQUM1QyxNQUFNRyxZQUFZLENBQUNDLFVBQWtCQztJQUNuQyxJQUFJLENBQUNELFlBQVksQ0FBQ0MsVUFBVSxPQUFPO0lBQ25DLE9BQU9ELGFBQWFDO0FBQ3RCO0FBRUEsOERBQThEO0FBQzlELE1BQU1DLHdCQUF3QjtJQUM1QixNQUFNQyxXQUFXLElBQUlqQjtJQUNyQmlCLFNBQVNDLE9BQU8sQ0FBQ0QsU0FBU0UsT0FBTyxLQUFLO0lBQ3RDLE9BQU9GLFNBQVNoQixXQUFXO0FBQzdCO0FBRUEsZ0NBQWdDO0FBQ2hDLE1BQU1tQixtQkFBbUI7UUFBQ0MseUVBQWdCLEdBQUdDLG9GQUEyQjtJQUN0RSxPQUFPQyxNQUFNQyxJQUFJLENB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U0FBUyxFQUFFO29CQUM3QixNQUFNNEMsY0FBYzt3QkFDbEJ6QixVQUFVMUQ7d0JBQ1Y0QyxJQUFJO3dCQUNKSyxRQUFROUI7d0JBQ1J3QyxnQkFBZ0I7d0JBQ2hCQyxjQUFjO3dCQUNkQyxpQkFBaUIsRUFBRTtvQkFDckI7b0JBRUEsT0FBTzt3QkFDTHZDLFVBQVU7NEJBQ1IsR0FBR2tCLE1BQU1sQixRQUFROzRCQUNqQixDQUFDaUIsU0FBUyxFQUFFNEM7d0JBQ2Q7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0EsT0FBTzNDO1lBQ1Q7UUFDRjtRQUVBLHFCQUFxQjtRQUNyQjBHLG1CQUFtQixDQUFDQztZQUNsQnpILElBQUksQ0FBQ2MsUUFBVztvQkFDZFosU0FBUzt3QkFDUCxHQUFHWSxNQUFNWixPQUFPO3dCQUNoQixHQUFHdUgsT0FBTztvQkFDWjtnQkFDRjtRQUNGO0lBQ0YsSUFDQTtJQUNFQyxNQUFNO0lBQ04sMEVBQTBFO0lBQzFFQyxZQUFZLENBQUM3RyxRQUFXLEVBQUM7SUFDekIseUNBQXlDO0lBQ3pDOEcsZUFBZTtBQUNqQixJQUVGIiwic291cmNlcyI6WyIvVXNlcnMvZXJ2aW5yYXBoYWVsYWxiYS9EZXNrdG9wL1g0MjAvc3JjL3N0b3JlL2dhbWVTdG9yZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc3RvcmUvZ2FtZVN0b3JlLnRzXG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICd6dXN0YW5kJztcbmltcG9ydCB7IHBlcnNpc3QgfSBmcm9tICd6dXN0YW5kL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgZG9jLCBnZXREb2MsIHNldERvYywgdXBkYXRlRG9jLCBkZWxldGVGaWVsZCB9IGZyb20gJ2ZpcmViYXNlL2ZpcmVzdG9yZSc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJ0AvbGliL2ZpcmViYXNlJztcbmltcG9ydCB7IGF1dGggfSBmcm9tICdAL2xpYi9maXJlYmFzZSc7XG5cbi8vIFNlY3Rpb24gcmVwcmVzZW50cyBhIGdyb3VwIG9mIGxldmVscyAoNSBsZXZlbHMgcGVyIHNlY3Rpb24sIDUgc2VjdGlvbnMgdG90YWwpXG5leHBvcnQgdHlwZSBTZWN0aW9uID0ge1xuICBpZDogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBpc0xvY2tlZDogYm9vbGVhbjtcbiAgaXNDb21wbGV0ZWQ6IGJvb2xlYW47XG4gIGxldmVsczogTGV2ZWxbXTtcbn07XG5cbi8vIExldmVsIHJlcHJlc2VudHMgYW4gaW5kaXZpZHVhbCBjaGFsbGVuZ2UgbGV2ZWxcbmV4cG9ydCB0eXBlIExldmVsID0ge1xuICBpZDogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBpc0xvY2tlZDogYm9vbGVhbjtcbiAgaXNDb21wbGV0ZWQ6IGJvb2xlYW47XG4gIGJlc3RTY29yZTogbnVtYmVyO1xuICBhdHRlbXB0czogbnVtYmVyO1xuICBsYXN0UGxheWVkOiBzdHJpbmcgfCBudWxsO1xufTtcblxuLy8gRGFpbHkgcXVlc3QgcmVwcmVzZW50YXRpb25cbmV4cG9ydCB0eXBlIERhaWx5UXVlc3QgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHJld2FyZDogbnVtYmVyOyAvLyBYUCByZXdhcmRcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgdGFyZ2V0OiBudW1iZXI7XG4gIGlzQ29tcGxldGVkOiBib29sZWFuO1xuICBleHBpcmVzQXQ6IHN0cmluZzsgLy8gSVNPIGRhdGUgc3RyaW5nXG59O1xuXG4vLyBVc2VyIHByb2ZpbGUgZGF0YSAoY29uc29saWRhdGVkIGZyb20gVXNlclNlcnZpY2UpXG4vLyBOb3RlOiB1aWQgaXMgbm90IHN0b3JlZCBzaW5jZSBkb2N1bWVudCBJRCBpcyBhbHJlYWR5IHRoZSB1c2VyIElEXG5leHBvcnQgdHlwZSBVc2VyUHJvZmlsZSA9IHtcbiAgZGlzcGxheU5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGVtYWlsOiBzdHJpbmcgfCBudWxsO1xuICBwaG90b1VSTDogc3RyaW5nIHwgbnVsbDtcbiAgam9pbkRhdGU6IHN0cmluZztcbiAgbGFzdEFjdGl2ZURhdGU6IHN0cmluZztcbiAgLy8gTmV3OiBncmFkZSBsZXZlbCBvbmJvYXJkaW5nIHNlbGVjdGlvbjsgbnVsbCB1bnRpbCB1c2VyIHBpY2tzIG9uZVxuICBncmFkZUxldmVsPzogJ0cxXzInIHwgJ0czXzQnIHwgJ0c1XzYnIHwgbnVsbDtcbiAgcHJlZmVyZW5jZXM6IHtcbiAgICBlbWFpbE5vdGlmaWNhdGlvbnM6IGJvb2xlYW47XG4gICAgZGFpbHlSZW1pbmRlcjogYm9vbGVhbjtcbiAgfTtcbn07XG5cbi8vIENoYWxsZW5nZSByZXN1bHQgdHJhY2tpbmdcbmV4cG9ydCB0eXBlIENoYWxsZW5nZVJlc3VsdCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgY2hhbGxlbmdlVHlwZTogJ21ha2Utc2VudGVuY2UnIHwgJ211bHRpcGxlLWNob2ljZScgfCAnY29udmVyc2F0aW9uJztcbiAgc2NvcmU6IG51bWJlcjtcbiAgbWF4U2NvcmU6IG51bWJlcjtcbiAgY29tcGxldGVkQXQ6IHN0cmluZztcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgaXNDb3JyZWN0OiBib29sZWFuO1xuICBnYW1lVHlwZTogc3RyaW5nO1xufTtcblxuLy8gUmVjb3JkIG9mIGNvbXBsZXRlZCBsZXZlbHMgZm9yIHByb2dyZXNzaW9uIHRyYWNraW5nXG50eXBlIExldmVsUHJvZ3Jlc3MgPSB7XG4gIFtnYW1lVHlwZTogc3RyaW5nXToge1xuICAgIGN1cnJlbnRMZXZlbDogbnVtYmVyO1xuICAgIGN1cnJlbnRTZWN0aW9uOiBudW1iZXI7XG4gICAgc2VjdGlvbnM6IFNlY3Rpb25bXTtcbiAgICB4cDogbnVtYmVyO1xuICAgIHF1ZXN0czogRGFpbHlRdWVzdFtdO1xuICAgIGNvbXBsZXRlZExldmVsczogc3RyaW5nW107XG4gICAgbGFzdFBsYXllZEF0Pzogc3RyaW5nO1xuICB9XG59O1xuXG4vLyBEZWZpbmUgYWNoaWV2ZW1lbnQgdHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQWNoaWV2ZW1lbnQge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHVubG9ja2VkQXQ/OiBzdHJpbmc7XG4gIGdhbWVUeXBlPzogc3RyaW5nOyAvLyBXaGljaCBnYW1lIHR5cGUgdGhpcyBhY2hpZXZlbWVudCB3YXMgZWFybmVkIGluXG59XG5cbi8vIEdhbWVTdGF0ZSByZXByZXNlbnRzIHRoZSBnbG9iYWwgZ2FtZSBzdGF0ZSAoY29uc29saWRhdGVkIGRhdGEgbW9kZWwpXG50eXBlIEdhbWVTdGF0ZSA9IHtcbiAgLy8gVXNlciBwcm9maWxlXG4gIHByb2ZpbGU6IFVzZXJQcm9maWxlIHwgbnVsbDtcbiAgXG4gIC8vIEdhbWUgc3RhdGlzdGljc1xuICBzY29yZTogbnVtYmVyO1xuICBzdHJlYWs6IG51bWJlcjtcbiAgbGFzdFN0cmVha0RhdGU6IHN0cmluZztcbiAgc3RyZWFrU3RhdGU6IFwibm9uZVwiIHwgXCJpbmFjdGl2ZVwiIHwgXCJhY3RpdmVcIjtcbiAgdG90YWxDaGFsbGVuZ2VzQ29tcGxldGVkOiBudW1iZXI7XG4gIFxuICAvLyBHYW1lIHByb2dyZXNzXG4gIHByb2dyZXNzOiBMZXZlbFByb2dyZXNzO1xuICBhY2hpZXZlbWVudHM6IHN0cmluZ1tdOyAvLyBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIHVzZXJzXG4gIGdhbWVBY2hpZXZlbWVudHM6IHtcbiAgICBbZ2FtZVR5cGU6IHN0cmluZ106IHN0cmluZ1tdOyAvLyBHYW1lLXNwZWNpZmljIGFjaGlldmVtZW50cyBieSBnYW1lIHR5cGVcbiAgfTtcbiAgXG4gIC8vIENoYWxsZW5nZSBoaXN0b3J5XG4gIHJlY2VudENoYWxsZW5nZXM6IENoYWxsZW5nZVJlc3VsdFtdO1xuICBcbiAgLy8gQWN0aW9uc1xuICBhZGRQb2ludHM6IChwb2ludHM6IG51bWJlciwgZ2FtZVR5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgaW5jcmVhc2VTdHJlYWs6ICgpID0+IHZvaWQ7XG4gIHJlc2V0U3RyZWFrOiAoKSA9PiB2b2lkO1xuICBcbiAgLy8gR2FtZSBwcm9ncmVzc2lvblxuICBjb21wbGV0ZUxldmVsOiAoZ2FtZVR5cGU6IHN0cmluZywgc2VjdGlvbklkOiBudW1iZXIsIGxldmVsSWQ6IG51bWJlciwgc2NvcmU/OiBudW1iZXIpID0+IHZvaWQ7XG4gIGNhbkFjY2Vzc0xldmVsOiAoZ2FtZVR5cGU6IHN0cmluZywgc2VjdGlvbklkOiBudW1iZXIsIGxldmVsSWQ6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgdW5sb2NrU2VjdGlvbjogKGdhbWVUeXBlOiBzdHJpbmcsIHNlY3Rpb25JZDogbnVtYmVyKSA9PiB2b2lkO1xuICBpbml0aWFsaXplR2FtZVByb2dyZXNzOiAoZ2FtZVR5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgXG4gIC8vIERhaWx5IHF1ZXN0c1xuICBhZGRQcm9ncmVzc1RvUXVlc3Q6IChnYW1lVHlwZTogc3RyaW5nLCBxdWVzdElkOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKSA9PiB2b2lkO1xuICBjb21wbGV0ZVF1ZXN0OiAoZ2FtZVR5cGU6IHN0cmluZywgcXVlc3RJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBjaGVja0FuZFJlZnJlc2hRdWVzdHM6IChnYW1lVHlwZTogc3RyaW5nKSA9PiB2b2lkO1xuICByZXNldFF1ZXN0czogKGdhbWVUeXBlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGNvbXBsZXRlU3RyZWFrQm9udXNRdWVzdDogKGdhbWVUeXBlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIFxuICAvLyBDaGFsbGVuZ2UgdHJhY2tpbmdcbiAgYWRkQ2hhbGxlbmdlUmVzdWx0OiAocmVzdWx0OiBDaGFsbGVuZ2VSZXN1bHQpID0+IHZvaWQ7XG4gIFxuICAvLyBVc2VyIHNwZWNpZmljIGRhdGFcbiAgbG9hZFVzZXJQcm9ncmVzczogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgc2F2ZVVzZXJQcm9ncmVzczogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgbWlncmF0ZVVzZXJEYXRhPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgY2hlY2tTdHJlYWtSZXNldDogKCkgPT4gdm9pZDtcbiAgY2hlY2tTdHJlYWtTdGF0dXM6ICgpID0+IHZvaWQ7XG4gIGNvbXBsZXRlR2FtZTogKGdhbWVUeXBlOiBzdHJpbmcsIHNjb3JlOiBudW1iZXIsIGlzQ29ycmVjdDogYm9vbGVhbikgPT4gdm9pZDtcbiAgZW5zdXJlR2FtZVByb2dyZXNzRXhpc3RzOiAoZ2FtZVR5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgXG4gIC8vIFByb2ZpbGUgbWFuYWdlbWVudFxuICB1cGRhdGVVc2VyUHJvZmlsZTogKHVwZGF0ZXM6IFBhcnRpYWw8VXNlclByb2ZpbGU+KSA9PiB2b2lkO1xufTtcblxuLy8gSGVscGVyIHRvIGdldCB0b2RheSdzIGRhdGUgYXMgSVNPIHN0cmluZyBmb3IgY29uc2lzdGVuY3lcbmNvbnN0IGdldFRvZGF5RGF0ZVN0cmluZyA9ICgpID0+IHtcbiAgLy8gVXNlIGNvbnNpc3RlbnQgSVNPIGZvcm1hdCBmb3IgYWxsIGRhdGVzXG4gIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG59O1xuXG4vLyBIZWxwZXIgdG8gY2hlY2sgaWYgdHdvIGRhdGVzIGFyZSBjb25zZWN1dGl2ZSBkYXlzXG5jb25zdCBpc0NvbnNlY3V0aXZlRGF5ID0gKHByZXZpb3VzRGF0ZTogc3RyaW5nLCBjdXJyZW50RGF0ZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGlmICghcHJldmlvdXNEYXRlKSByZXR1cm4gZmFsc2U7XG4gIFxuICAvLyBQYXJzZSBkYXRlcyAodXNpbmcgRGF0ZSBjb25zdHJ1Y3RvciB3aXRoIFlZWVktTU0tREQgZm9ybWF0KVxuICBjb25zdCBwcmV2ID0gbmV3IERhdGUocHJldmlvdXNEYXRlKTtcbiAgY29uc3QgY3VyciA9IG5ldyBEYXRlKGN1cnJlbnREYXRlKTtcbiAgXG4gIC8vIFNldCB0byBzYW1lIHRpbWUgdG8gY29tcGFyZSBqdXN0IHRoZSBkYXRlc1xuICBwcmV2LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjdXJyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBcbiAgLy8gQ2FsY3VsYXRlIGRpZmZlcmVuY2UgaW4gZGF5c1xuICBjb25zdCB0aW1lRGlmZiA9IGN1cnIuZ2V0VGltZSgpIC0gcHJldi5nZXRUaW1lKCk7XG4gIGNvbnN0IGRheXNEaWZmID0gdGltZURpZmYgLyAoMTAwMCAqIDM2MDAgKiAyNCk7XG4gIFxuICAvLyBSZXR1cm4gdHJ1ZSBpZiB0aGUgZGF0ZXMgYXJlIGV4YWN0bHkgMSBkYXkgYXBhcnRcbiAgcmV0dXJuIE1hdGgucm91bmQoZGF5c0RpZmYpID09PSAxO1xufTtcblxuLy8gSGVscGVyIHRvIGNoZWNrIGlmIGRhdGVzIGFyZSB0aGUgc2FtZSBkYXlcbmNvbnN0IGlzU2FtZURheSA9IChkYXRlU3RyMTogc3RyaW5nLCBkYXRlU3RyMjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGlmICghZGF0ZVN0cjEgfHwgIWRhdGVTdHIyKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBkYXRlU3RyMSA9PT0gZGF0ZVN0cjI7XG59O1xuXG4vLyBIZWxwZXIgdG8gZ2V0IHRvbW9ycm93J3MgZGF0ZSBhcyBJU08gc3RyaW5nIGZvciBjb25zaXN0ZW5jeVxuY29uc3QgZ2V0VG9tb3Jyb3dEYXRlU3RyaW5nID0gKCk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHRvbW9ycm93ID0gbmV3IERhdGUoKTtcbiAgdG9tb3Jyb3cuc2V0RGF0ZSh0b21vcnJvdy5nZXREYXRlKCkgKyAxKTtcbiAgcmV0dXJuIHRvbW9ycm93LnRvSVNPU3RyaW5nKCk7XG59O1xuXG4vLyBHZW5lcmF0ZSBzZWN0aW9ucyB3aXRoIGxldmVsc1xuY29uc3QgZ2VuZXJhdGVTZWN0aW9ucyA9IChjb3VudDogbnVtYmVyID0gNSwgbGV2ZWxzUGVyU2VjdGlvbjogbnVtYmVyID0gNSk6IFNlY3Rpb25bXSA9PiB7XG4gIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBjb3VudCB9KS5tYXAoKF8sIHNlY3Rpb25JbmRleCkgPT4gKHtcbiAgICBpZDogc2VjdGlvbkluZGV4LFxuICAgIHRpdGxlOiBgU2VjdGlvbiAke3NlY3Rpb25JbmRleCArIDF9YCxcbiAgICBkZXNjcmlwdGlvbjogYENvbXBsZXRlIGFsbCBsZXZlbHMgaW4gU2VjdGlvbiAke3NlY3Rpb25JbmRleCArIDF9YCxcbiAgICBpc0xvY2tlZDogc2VjdGlvbkluZGV4ICE9PSAwLCAvLyBPbmx5IGZpcnN0IHNlY3Rpb24gaXMgdW5sb2NrZWRcbiAgICBpc0NvbXBsZXRlZDogZmFsc2UsXG4gICAgbGV2ZWxzOiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBsZXZlbHNQZXJTZWN0aW9uIH0pLm1hcCgoXywgbGV2ZWxJbmRleCkgPT4gKHtcbiAgICAgIGlkOiBsZXZlbEluZGV4LFxuICAgICAgdGl0bGU6IGBMZXZlbCAke2xldmVsSW5kZXggKyAxfWAsXG4gICAgICBpc0xvY2tlZDogbGV2ZWxJbmRleCAhPT0gMCwgLy8gT25seSBmaXJzdCBsZXZlbCBpbiBlYWNoIHNlY3Rpb24gaXMgdW5sb2NrZWQgaW5pdGlhbGx5XG4gICAgICBpc0NvbXBsZXRlZDogZmFsc2UsXG4gICAgICBiZXN0U2NvcmU6IDAsXG4gICAgICBhdHRlbXB0czogMCxcbiAgICAgIGxhc3RQbGF5ZWQ6IG51bGxcbiAgICB9KSlcbiAgfSkpO1xufTtcblxuLy8gR2VuZXJhdGUgZGFpbHkgcXVlc3RzXG5jb25zdCBnZW5lcmF0ZURhaWx5UXVlc3RzID0gKCk6IERhaWx5UXVlc3RbXSA9PiB7XG4gIC8vIEdldCB0b21vcnJvdydzIGRhdGUgaW4gWVlZWS1NTS1ERCBmb3JtYXQgKHVzaW5nIGxvY2FsIHRpbWUpXG4gIGNvbnN0IGV4cGlyZXNBdCA9IGdldFRvbW9ycm93RGF0ZVN0cmluZygpO1xuICBcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBpZDogJ3N0cmVhay1ib251cycsXG4gICAgICB0aXRsZTogJ0dldCAzIENvcnJlY3QgaW4gYSBSb3cnLFxuICAgICAgZGVzY3JpcHRpb246ICdBbnN3ZXIgdGhyZWUgcXVlc3Rpb25zIGNvcnJlY3RseSBpbiBhIHJvdycsXG4gICAgICByZXdhcmQ6IDEwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB0YXJnZXQ6IDEsIC8vIEp1c3QgbmVlZHMgdG8gYmUgYWNoaWV2ZWQgb25jZVxuICAgICAgaXNDb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgZXhwaXJlc0F0XG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2NvbXBsZXRlLWdhbWVzJyxcbiAgICAgIHRpdGxlOiAnQ29tcGxldGUgMyBHYW1lcycsXG4gICAgICBkZXNjcmlwdGlvbjogJ0NvbXBsZXRlIGFueSAzIGdhbWVzIHRvZGF5IChhbnkgc2NvcmUpJyxcbiAgICAgIHJld2FyZDogMTUsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHRhcmdldDogMyxcbiAgICAgIGlzQ29tcGxldGVkOiBmYWxzZSxcbiAgICAgIGV4cGlyZXNBdFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICdwZXJmZWN0LXNjb3JlJyxcbiAgICAgIHRpdGxlOiAnUGVyZmVjdCBTY29yZScsXG4gICAgICBkZXNjcmlwdGlvbjogJ0NvbXBsZXRlIGEgbGV2ZWwgd2l0aCBhIHBlcmZlY3Qgc2NvcmUnLFxuICAgICAgcmV3YXJkOiAyMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdGFyZ2V0OiAxLFxuICAgICAgaXNDb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgZXhwaXJlc0F0XG4gICAgfVxuICBdO1xufTtcblxuLy8gQ29sbGVjdGlvbiBuYW1lIGZvciB1c2VyIGdhbWUgcHJvZ3Jlc3NcbmNvbnN0IEdBTUVfUFJPR1JFU1NfQ09MTEVDVElPTiA9ICdnYW1lUHJvZ3Jlc3MnO1xuXG5leHBvcnQgY29uc3QgdXNlR2FtZVN0b3JlID0gY3JlYXRlPEdhbWVTdGF0ZT4oKShcbiAgcGVyc2lzdChcbiAgICAoc2V0LCBnZXQpID0+ICh7XG4gICAgICAvLyBJbml0aWFsIHN0YXRlXG4gICAgICBwcm9maWxlOiBudWxsLFxuICAgICAgc2NvcmU6IDAsXG4gICAgICBzdHJlYWs6IDAsXG4gICAgICBsYXN0U3RyZWFrRGF0ZTogJycsXG4gICAgICBzdHJlYWtTdGF0ZTogJ25vbmUnIGFzICdub25lJyB8ICdpbmFjdGl2ZScgfCAnYWN0aXZlJyxcbiAgICAgIHRvdGFsQ2hhbGxlbmdlc0NvbXBsZXRlZDogMCxcbiAgICAgIHByb2dyZXNzOiB7fSxcbiAgICAgIGFjaGlldmVtZW50czogW10sXG4gICAgICBnYW1lQWNoaWV2ZW1lbnRzOiB7fSxcbiAgICAgIHJlY2VudENoYWxsZW5nZXM6IFtdLFxuICAgICAgXG4gICAgICAvLyBCYXNpYyBnYW1lIGFjdGlvbnNcbiAgICAgIGFkZFBvaW50czogKHBvaW50cywgZ2FtZVR5cGUpID0+IHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgZ2FtZVByb2dyZXNzID0gc3RhdGUucHJvZ3Jlc3NbZ2FtZVR5cGVdO1xuICAgICAgICBpZiAoIWdhbWVQcm9ncmVzcykgcmV0dXJuIHN0YXRlO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtYUCBEZWJ1Z10gQWRkaW5nICR7cG9pbnRzfSBwb2ludHMgdG8gJHtnYW1lVHlwZX1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtYUCBEZWJ1Z10gQ3VycmVudCBYUDogJHtnYW1lUHJvZ3Jlc3MueHB9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBQcmV2ZW50IG5lZ2F0aXZlIFhQIC0gY2FsY3VsYXRlIG5ldyBYUCBlbnN1cmluZyBpdCBkb2Vzbid0IGdvIGJlbG93IDBcbiAgICAgICAgY29uc3QgbmV3WFAgPSBNYXRoLm1heCgwLCBnYW1lUHJvZ3Jlc3MueHAgKyBwb2ludHMpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIFhQIGZvciB0aGUgc3BlY2lmaWMgZ2FtZSB0eXBlXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRHYW1lUHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgLi4uZ2FtZVByb2dyZXNzLFxuICAgICAgICAgIHhwOiBuZXdYUFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtYUCBEZWJ1Z10gTmV3IHRvdGFsIFhQOiAke3VwZGF0ZWRHYW1lUHJvZ3Jlc3MueHB9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgZGFpbHkgcXVlc3QgcHJvZ3Jlc3MgZm9yIFhQIC0gRElSRUNUTFkgdXNlIHRoZSBnYW1lJ3MgdG90YWwgWFAgdmFsdWUgZm9yIGNvbnNpc3RlbmN5XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRRdWVzdHMgPSBnYW1lUHJvZ3Jlc3MucXVlc3RzO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgc2NvcmU6IHN0YXRlLnNjb3JlICsgcG9pbnRzLFxuICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5wcm9ncmVzcyxcbiAgICAgICAgICAgIFtnYW1lVHlwZV06IHtcbiAgICAgICAgICAgICAgLi4udXBkYXRlZEdhbWVQcm9ncmVzcyxcbiAgICAgICAgICAgICAgcXVlc3RzOiB1cGRhdGVkUXVlc3RzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gU2F2ZSB0byBGaXJlYmFzZSBhZnRlciB1cGRhdGluZyBsb2NhbCBzdGF0ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLnNhdmVVc2VyUHJvZ3Jlc3MoKSwgMCk7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH0pLFxuICAgICAgXG4gICAgICBpbmNyZWFzZVN0cmVhazogKCkgPT4gc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB0b2RheSA9IGdldFRvZGF5RGF0ZVN0cmluZygpO1xuICAgICAgICBsZXQgbmV3U3RyZWFrID0gc3RhdGUuc3RyZWFrO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2FzZSAxOiBBbHJlYWR5IGxvZ2dlZCBzdHJlYWsgdG9kYXkgLSBkb24ndCBpbmNyZWFzZSwganVzdCBtYWtlIGFjdGl2ZVxuICAgICAgICBpZiAoaXNTYW1lRGF5KHN0YXRlLmxhc3RTdHJlYWtEYXRlLCB0b2RheSkpIHtcbiAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIC4uLnN0YXRlLCBcbiAgICAgICAgICAgIHN0cmVha1N0YXRlOiAnYWN0aXZlJyBcbiAgICAgICAgICB9OyBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2FzZSAyOiBGaXJzdCB0aW1lIHBsYXlpbmcgb3IgY29udGludWluZyBzdHJlYWsgZnJvbSB5ZXN0ZXJkYXlcbiAgICAgICAgaWYgKGlzQ29uc2VjdXRpdmVEYXkoc3RhdGUubGFzdFN0cmVha0RhdGUsIHRvZGF5KSB8fCAhc3RhdGUubGFzdFN0cmVha0RhdGUpIHtcbiAgICAgICAgICBuZXdTdHJlYWsgKz0gMTtcbiAgICAgICAgfSBcbiAgICAgICAgLy8gQ2FzZSAzOiBNaXNzZWQgYSBkYXkgb3IgbW9yZSwgcmVzdGFydCBzdHJlYWsgZnJvbSAxXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG5ld1N0cmVhayA9IDE7IC8vIFN0YXJ0IGEgbmV3IHN0cmVha1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICBzdHJlYWs6IG5ld1N0cmVhayxcbiAgICAgICAgICBsYXN0U3RyZWFrRGF0ZTogdG9kYXksXG4gICAgICAgICAgc3RyZWFrU3RhdGU6ICdhY3RpdmUnIGFzICdub25lJyB8ICdpbmFjdGl2ZScgfCAnYWN0aXZlJ1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gU2F2ZSB0byBGaXJlYmFzZSBhZnRlciB1cGRhdGluZyBsb2NhbCBzdGF0ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLnNhdmVVc2VyUHJvZ3Jlc3MoKSwgMCk7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH0pLFxuICAgICAgXG4gICAgICByZXNldFN0cmVhazogKCkgPT4gc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICBzdHJlYWs6IDAsXG4gICAgICAgICAgbGFzdFN0cmVha0RhdGU6ICcnLFxuICAgICAgICAgIHN0cmVha1N0YXRlOiAnbm9uZScgYXMgJ25vbmUnIHwgJ2luYWN0aXZlJyB8ICdhY3RpdmUnXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBTYXZlIHRvIEZpcmViYXNlIGFmdGVyIHVwZGF0aW5nIGxvY2FsIHN0YXRlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZ2V0KCkuc2F2ZVVzZXJQcm9ncmVzcygpLCAwKTtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgfSksXG4gICAgICBcbiAgICAgIC8vIFByb2dyZXNzIHRyYWNraW5nXG4gICAgICBpbml0aWFsaXplR2FtZVByb2dyZXNzOiAoZ2FtZVR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgcHJvZ3Jlc3MgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgZ2FtZSB0eXBlXG4gICAgICAgICAgaWYgKHN0YXRlLnByb2dyZXNzW2dhbWVUeXBlXSAmJiBzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV0uc2VjdGlvbnMgJiYgc3RhdGUucHJvZ3Jlc3NbZ2FtZVR5cGVdLnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBHYW1lIHByb2dyZXNzIGZvciAke2dhbWVUeXBlfSBhbHJlYWR5IGluaXRpYWxpemVkLmApO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZyhgSW5pdGlhbGl6aW5nIGdhbWUgcHJvZ3Jlc3MgZm9yICR7Z2FtZVR5cGV9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRGVmYXVsdCBzZWN0aW9ucyB3aXRoIDUgc2VjdGlvbnMgYW5kIDUgbGV2ZWxzIGVhY2hcbiAgICAgICAgICBjb25zdCBzZWN0aW9ucyA9IGdlbmVyYXRlU2VjdGlvbnMoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGaXJzdCBzZWN0aW9uIGFuZCBmaXJzdCBsZXZlbCBhcmUgYWx3YXlzIHVubG9ja2VkXG4gICAgICAgICAgaWYgKHNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNlY3Rpb25zWzBdLmlzTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzZWN0aW9uc1swXS5sZXZlbHMgJiYgc2VjdGlvbnNbMF0ubGV2ZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc2VjdGlvbnNbMF0ubGV2ZWxzWzBdLmlzTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdlbmVyYXRlIGZyZXNoIGRhaWx5IHF1ZXN0cyBpZiBuZWVkZWRcbiAgICAgICAgICBjb25zdCBxdWVzdHMgPSBnZW5lcmF0ZURhaWx5UXVlc3RzKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLnByb2dyZXNzLFxuICAgICAgICAgICAgICBbZ2FtZVR5cGVdOiB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMsXG4gICAgICAgICAgICAgICAgeHA6IDAsXG4gICAgICAgICAgICAgICAgcXVlc3RzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbDogMCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWRMZXZlbHM6IFtdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNvbXBsZXRlTGV2ZWw6IChnYW1lVHlwZTogc3RyaW5nLCBzZWN0aW9uSWQ6IG51bWJlciwgbGV2ZWxJZDogbnVtYmVyLCBzY29yZT86IG51bWJlcikgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZ2FtZVByb2dyZXNzID0gc3RhdGUucHJvZ3Jlc3NbZ2FtZVR5cGVdO1xuICAgICAgICAgIGlmICghZ2FtZVByb2dyZXNzKSByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIGEgZGVlcCBjb3B5IG9mIHNlY3Rpb25zXG4gICAgICAgICAgY29uc3QgdXBkYXRlZFNlY3Rpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnYW1lUHJvZ3Jlc3Muc2VjdGlvbnMpKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZXQgdGhlIHNlY3Rpb24gYW5kIGxldmVsXG4gICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHVwZGF0ZWRTZWN0aW9uc1tzZWN0aW9uSWRdO1xuICAgICAgICAgIGlmICghc2VjdGlvbiB8fCAhc2VjdGlvbi5sZXZlbHNbbGV2ZWxJZF0pIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgbGV2ZWwgc3RhdHMgLSB0aGlzIGhhcHBlbnMgcmVnYXJkbGVzcyBvZiBzY29yZVxuICAgICAgICAgIGNvbnN0IGxldmVsID0gc2VjdGlvbi5sZXZlbHNbbGV2ZWxJZF07XG4gICAgICAgICAgbGV2ZWwuYXR0ZW1wdHMgPSAobGV2ZWwuYXR0ZW1wdHMgfHwgMCkgKyAxO1xuICAgICAgICAgIGxldmVsLmxhc3RQbGF5ZWQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU3RvcmUgdGhlIGJlc3Qgc2NvcmUgaWYgaGlnaGVyIHRoYW4gcHJldmlvdXNcbiAgICAgICAgICBpZiAoc2NvcmUgIT09IHVuZGVmaW5lZCAmJiAobGV2ZWwuYmVzdFNjb3JlID09PSB1bmRlZmluZWQgfHwgc2NvcmUgPiBsZXZlbC5iZXN0U2NvcmUpKSB7XG4gICAgICAgICAgICBsZXZlbC5iZXN0U2NvcmUgPSBzY29yZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIGEgdW5pcXVlIElEIGZvciB0aGlzIGxldmVsIHRvIHRyYWNrIGNvbXBsZXRpb25cbiAgICAgICAgICBjb25zdCBsZXZlbEtleSA9IGAke3NlY3Rpb25JZH0tJHtsZXZlbElkfWA7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVHJhY2sgY29tcGxldGVkIGxldmVscyBmb3Igc3VtbWFyeSBzdGF0c1xuICAgICAgICAgIGxldCBjb21wbGV0ZWRMZXZlbHMgPSBbLi4uKGdhbWVQcm9ncmVzcy5jb21wbGV0ZWRMZXZlbHMgfHwgW10pXTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZXQgYWNoaWV2ZW1lbnRzIGFycmF5c1xuICAgICAgICAgIGxldCBhY2hpZXZlbWVudHMgPSBbLi4uKHN0YXRlLmFjaGlldmVtZW50cyB8fCBbXSldO1xuICAgICAgICAgIGxldCBnYW1lVHlwZUFjaGlldmVtZW50cyA9IFsuLi4oc3RhdGUuZ2FtZUFjaGlldmVtZW50c1tnYW1lVHlwZV0gfHwgW10pXTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBUcmFjayB3aGVyZSB0aGUgdXNlciBzaG91bGQgZ28gbmV4dCAoY3VycmVudCBwb3NpdGlvbilcbiAgICAgICAgICBsZXQgbmV4dFNlY3Rpb25JZCA9IHNlY3Rpb25JZDtcbiAgICAgICAgICBsZXQgbmV4dExldmVsSWQgPSBsZXZlbElkO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE1hcmsgbGV2ZWwgYXMgY29tcGxldGVkIGlmIHNjb3JlIGlzIGF0IGxlYXN0IDgwJSAodGhyZXNob2xkIGZvciBjb21wbGV0aW5nIGEgbGV2ZWwpXG4gICAgICAgICAgY29uc3QgaXNMZXZlbENvbXBsZXRlZCA9IHNjb3JlICE9PSB1bmRlZmluZWQgJiYgc2NvcmUgPj0gODA7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGlzTGV2ZWxDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIC8vIE1hcmsgdGhlIGxldmVsIGFzIGNvbXBsZXRlZFxuICAgICAgICAgICAgbGV2ZWwuaXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgdG8gY29tcGxldGVkIGxldmVscyBhcnJheSBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgICAgICAgaWYgKCFjb21wbGV0ZWRMZXZlbHMuaW5jbHVkZXMobGV2ZWxLZXkpKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlZExldmVscy5wdXNoKGxldmVsS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIFwiUGVyZmVjdCBTY29yZVwiIGFjaGlldmVtZW50IC0gc2NvcmUgbXVzdCBiZSBhdCBsZWFzdCAxMDAgKGluY2x1ZGluZyBib251c2VzKVxuICAgICAgICAgICAgaWYgKHNjb3JlID49IDEwMCAmJiAhZ2FtZVR5cGVBY2hpZXZlbWVudHMuaW5jbHVkZXMoJ3BlcmZlY3Qtc2NvcmUnKSkge1xuICAgICAgICAgICAgICAvLyBBZGQgdG8gZ2FtZS1zcGVjaWZpYyBhY2hpZXZlbWVudHNcbiAgICAgICAgICAgICAgZ2FtZVR5cGVBY2hpZXZlbWVudHMucHVzaCgncGVyZmVjdC1zY29yZScpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQWxzbyBhZGQgdG8gZ2xvYmFsIGFjaGlldmVtZW50cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICBpZiAoIWFjaGlldmVtZW50cy5pbmNsdWRlcygncGVyZmVjdC1zY29yZScpKSB7XG4gICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLnB1c2goJ3BlcmZlY3Qtc2NvcmUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtBY2hpZXZlbWVudF0gVW5sb2NrZWQ6IFBlcmZlY3QgU2NvcmUgaW4gJHtnYW1lVHlwZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXh0IGxldmVsIElEIC0gYWR2YW5jZSB0byB0aGUgbmV4dCBsZXZlbFxuICAgICAgICAgICAgaWYgKGxldmVsSWQgPCBzZWN0aW9uLmxldmVscy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgbGV2ZWwgaW4gdGhlIHNhbWUgc2VjdGlvblxuICAgICAgICAgICAgICBuZXh0TGV2ZWxJZCA9IGxldmVsSWQgKyAxO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVW5sb2NrIHRoZSBuZXh0IGxldmVsXG4gICAgICAgICAgICAgIHNlY3Rpb24ubGV2ZWxzW25leHRMZXZlbElkXS5pc0xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIC8vIElmIHRoaXMgd2FzIHRoZSBsYXN0IGxldmVsIGluIHRoZSBzZWN0aW9uLCBtb3ZlIHRvIHRoZSBuZXh0IHNlY3Rpb25cbiAgICAgICAgICAgIGVsc2UgaWYgKGxldmVsSWQgPT09IHNlY3Rpb24ubGV2ZWxzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgc2VjdGlvbi5pc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgXCJTZWN0aW9uIENoYW1waW9uXCIgYWNoaWV2ZW1lbnRcbiAgICAgICAgICAgICAgLy8gQSBzZWN0aW9uIGlzIGNvbnNpZGVyZWQgY29tcGxldGVkIHdoZW4gYWxsIGl0cyBsZXZlbHMgYXJlIGNvbXBsZXRlZFxuICAgICAgICAgICAgICBjb25zdCBpc1NlY3Rpb25Db21wbGV0ZWQgPSBzZWN0aW9uLmxldmVscy5ldmVyeSgobHZsOiBMZXZlbCkgPT4gbHZsLmlzQ29tcGxldGVkKTtcbiAgICAgICAgICAgICAgaWYgKGlzU2VjdGlvbkNvbXBsZXRlZCAmJiAhZ2FtZVR5cGVBY2hpZXZlbWVudHMuaW5jbHVkZXMoJ3NlY3Rpb24tY2hhbXBpb24nKSkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0byBnYW1lLXNwZWNpZmljIGFjaGlldmVtZW50c1xuICAgICAgICAgICAgICAgIGdhbWVUeXBlQWNoaWV2ZW1lbnRzLnB1c2goJ3NlY3Rpb24tY2hhbXBpb24nKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBbHNvIGFkZCB0byBnbG9iYWwgYWNoaWV2ZW1lbnRzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICAgICAgaWYgKCFhY2hpZXZlbWVudHMuaW5jbHVkZXMoJ3NlY3Rpb24tY2hhbXBpb24nKSkge1xuICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLnB1c2goJ3NlY3Rpb24tY2hhbXBpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtBY2hpZXZlbWVudF0gVW5sb2NrZWQ6IFNlY3Rpb24gQ2hhbXBpb24gaW4gJHtnYW1lVHlwZX1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBzZWN0aW9uIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgICBpZiAoc2VjdGlvbklkIDwgdXBkYXRlZFNlY3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBuZXh0U2VjdGlvbklkID0gc2VjdGlvbklkICsgMTtcbiAgICAgICAgICAgICAgICBuZXh0TGV2ZWxJZCA9IDA7IC8vIFN0YXJ0IGF0IHRoZSBmaXJzdCBsZXZlbCBvZiB0aGUgbmV4dCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVW5sb2NrIHRoZSBuZXh0IHNlY3Rpb25cbiAgICAgICAgICAgICAgICB1cGRhdGVkU2VjdGlvbnNbbmV4dFNlY3Rpb25JZF0uaXNMb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVbmxvY2sgdGhlIGZpcnN0IGxldmVsIG9mIHRoZSBuZXh0IHNlY3Rpb25cbiAgICAgICAgICAgICAgICB1cGRhdGVkU2VjdGlvbnNbbmV4dFNlY3Rpb25JZF0ubGV2ZWxzWzBdLmlzTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXBkYXRlIHF1ZXN0IHByb2dyZXNzIGZvciBnYW1lIGNvbXBsZXRpb25cbiAgICAgICAgICBjb25zdCB1cGRhdGVkUXVlc3RzID0gZ2FtZVByb2dyZXNzLnF1ZXN0cy5tYXAocXVlc3QgPT4ge1xuICAgICAgICAgICAgLy8gRm9yIHRoZSAncGVyZmVjdC1zY29yZScgcXVlc3QsIGNvdW50IGdhbWVzIHdpdGggYSBzY29yZSBvZiBhdCBsZWFzdCAxMDAgKGluY2x1ZGluZyBib251c2VzKVxuICAgICAgICAgICAgaWYgKHF1ZXN0LmlkID09PSAncGVyZmVjdC1zY29yZScgJiYgIXF1ZXN0LmlzQ29tcGxldGVkICYmIHNjb3JlICE9PSB1bmRlZmluZWQgJiYgc2NvcmUgPj0gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld1Byb2dyZXNzID0gTWF0aC5taW4ocXVlc3QucHJvZ3Jlc3MgKyAxLCBxdWVzdC50YXJnZXQpO1xuICAgICAgICAgICAgICBjb25zdCBpc0NvbXBsZXRlZCA9IG5ld1Byb2dyZXNzID49IHF1ZXN0LnRhcmdldDtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucXVlc3QsXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IG5ld1Byb2dyZXNzLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBxdWVzdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDYWxjdWxhdGUgWFAgTWFzdGVyIGFjaGlldmVtZW50XG4gICAgICAgICAgaWYgKGdhbWVQcm9ncmVzcy54cCA+PSAxMDAwICYmICFnYW1lVHlwZUFjaGlldmVtZW50cy5pbmNsdWRlcygneHAtbWFzdGVyJykpIHtcbiAgICAgICAgICAgIC8vIEFkZCB0byBnYW1lLXNwZWNpZmljIGFjaGlldmVtZW50c1xuICAgICAgICAgICAgZ2FtZVR5cGVBY2hpZXZlbWVudHMucHVzaCgneHAtbWFzdGVyJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFsc28gYWRkIHRvIGdsb2JhbCBhY2hpZXZlbWVudHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgIGlmICghYWNoaWV2ZW1lbnRzLmluY2x1ZGVzKCd4cC1tYXN0ZXInKSkge1xuICAgICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCgneHAtbWFzdGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQWNoaWV2ZW1lbnRdIFVubG9ja2VkOiBYUCBNYXN0ZXIgaW4gJHtnYW1lVHlwZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUHJlcGFyZSB1cGRhdGVkIGdhbWVBY2hpZXZlbWVudHMgb2JqZWN0XG4gICAgICAgICAgY29uc3QgdXBkYXRlZEdhbWVBY2hpZXZlbWVudHMgPSB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5nYW1lQWNoaWV2ZW1lbnRzLFxuICAgICAgICAgICAgW2dhbWVUeXBlXTogZ2FtZVR5cGVBY2hpZXZlbWVudHNcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFByZXBhcmUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLCAvLyBVcGRhdGUgZ2xvYmFsIGFjaGlldmVtZW50cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgZ2FtZUFjaGlldmVtZW50czogdXBkYXRlZEdhbWVBY2hpZXZlbWVudHMsIC8vIFVwZGF0ZSBnYW1lLXNwZWNpZmljIGFjaGlldmVtZW50c1xuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIFtnYW1lVHlwZV06IHtcbiAgICAgICAgICAgICAgICAuLi5nYW1lUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgc2VjdGlvbnM6IHVwZGF0ZWRTZWN0aW9ucyxcbiAgICAgICAgICAgICAgICBxdWVzdHM6IHVwZGF0ZWRRdWVzdHMsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkTGV2ZWxzLCAvLyBVcGRhdGUgY29tcGxldGVkIGxldmVscyB0cmFja2luZ1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgY3VycmVudCBwb3NpdGlvbiB0byB0aGUgbmV4dCBsZXZlbFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uOiBuZXh0U2VjdGlvbklkLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbDogbmV4dExldmVsSWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTG9nIHRoZSBsZXZlbCB0cmFuc2l0aW9uXG4gICAgICAgICAgY29uc29sZS5sb2coYFtQcm9ncmVzc10gQWR2YW5jZWQgdG8gU2VjdGlvbiAke25leHRTZWN0aW9uSWR9LCBMZXZlbCAke25leHRMZXZlbElkfWApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNhdmUgdG8gRmlyZWJhc2UgYWZ0ZXIgdXBkYXRpbmcgbG9jYWwgc3RhdGVcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLnNhdmVVc2VyUHJvZ3Jlc3MoKSwgMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNhbkFjY2Vzc0xldmVsOiAoZ2FtZVR5cGU6IHN0cmluZywgc2VjdGlvbklkOiBudW1iZXIsIGxldmVsSWQ6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgZ2FtZSBwcm9ncmVzcyBleGlzdHNcbiAgICAgICAgaWYgKCFzdGF0ZS5wcm9ncmVzcyB8fCAhc3RhdGUucHJvZ3Jlc3NbZ2FtZVR5cGVdKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBnYW1lUHJvZ3Jlc3MgPSBzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV07XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBzZWN0aW9ucyBhcnJheSBleGlzdHMgYW5kIHNlY3Rpb25JZCBpcyB2YWxpZFxuICAgICAgICBpZiAoIWdhbWVQcm9ncmVzcy5zZWN0aW9ucyB8fCAhQXJyYXkuaXNBcnJheShnYW1lUHJvZ3Jlc3Muc2VjdGlvbnMpIHx8IFxuICAgICAgICAgICAgc2VjdGlvbklkIDwgMCB8fCBzZWN0aW9uSWQgPj0gZ2FtZVByb2dyZXNzLnNlY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGdhbWVQcm9ncmVzcy5zZWN0aW9uc1tzZWN0aW9uSWRdO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgc2VjdGlvbiBpcyBsb2NrZWRcbiAgICAgICAgaWYgKCFzZWN0aW9uIHx8IHNlY3Rpb24uaXNMb2NrZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIGxldmVscyBhcnJheSBleGlzdHMgYW5kIGxldmVsSWQgaXMgdmFsaWRcbiAgICAgICAgaWYgKCFzZWN0aW9uLmxldmVscyB8fCAhQXJyYXkuaXNBcnJheShzZWN0aW9uLmxldmVscykgfHwgXG4gICAgICAgICAgICBsZXZlbElkIDwgMCB8fCBsZXZlbElkID49IHNlY3Rpb24ubGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBzZWN0aW9uLmxldmVsc1tsZXZlbElkXTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIGxldmVsIGV4aXN0cyBhbmQgaXMgbm90IGxvY2tlZFxuICAgICAgICByZXR1cm4gbGV2ZWwgJiYgIWxldmVsLmlzTG9ja2VkO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgdW5sb2NrU2VjdGlvbjogKGdhbWVUeXBlOiBzdHJpbmcsIHNlY3Rpb25JZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCBnYW1lUHJvZ3Jlc3MgPSBzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV07XG4gICAgICAgICAgaWYgKCFnYW1lUHJvZ3Jlc3MpIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB1cGRhdGVkU2VjdGlvbnMgPSBbLi4uZ2FtZVByb2dyZXNzLnNlY3Rpb25zXTtcbiAgICAgICAgICBpZiAodXBkYXRlZFNlY3Rpb25zW3NlY3Rpb25JZF0pIHtcbiAgICAgICAgICAgIHVwZGF0ZWRTZWN0aW9uc1tzZWN0aW9uSWRdLmlzTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBBbHNvIHVubG9jayB0aGUgZmlyc3QgbGV2ZWxcbiAgICAgICAgICAgIGlmICh1cGRhdGVkU2VjdGlvbnNbc2VjdGlvbklkXS5sZXZlbHNbMF0pIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFNlY3Rpb25zW3NlY3Rpb25JZF0ubGV2ZWxzWzBdLmlzTG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIFtnYW1lVHlwZV06IHtcbiAgICAgICAgICAgICAgICAuLi5nYW1lUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgc2VjdGlvbnM6IHVwZGF0ZWRTZWN0aW9uc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTYXZlIHRvIEZpcmViYXNlIGFmdGVyIHVwZGF0aW5nIGxvY2FsIHN0YXRlXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBnZXQoKS5zYXZlVXNlclByb2dyZXNzKCksIDApO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBEYWlseSBxdWVzdHNcbiAgICAgIGFkZFByb2dyZXNzVG9RdWVzdDogKGdhbWVUeXBlOiBzdHJpbmcsIHF1ZXN0SWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGdhbWVQcm9ncmVzcyA9IHN0YXRlLnByb2dyZXNzW2dhbWVUeXBlXTtcbiAgICAgICAgICBpZiAoIWdhbWVQcm9ncmVzcykgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRRdWVzdHMgPSBnYW1lUHJvZ3Jlc3MucXVlc3RzLm1hcChxdWVzdCA9PiB7XG4gICAgICAgICAgICBpZiAocXVlc3QuaWQgPT09IHF1ZXN0SWQgJiYgIXF1ZXN0LmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld1Byb2dyZXNzID0gTWF0aC5taW4ocXVlc3QucHJvZ3Jlc3MgKyBhbW91bnQsIHF1ZXN0LnRhcmdldCk7XG4gICAgICAgICAgICAgIGNvbnN0IGlzQ29tcGxldGVkID0gbmV3UHJvZ3Jlc3MgPj0gcXVlc3QudGFyZ2V0O1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gV2hlbiBhIHF1ZXN0IGNvbXBsZXRlcywgaXQgYXV0b21hdGljYWxseSBnaXZlcyBpdHMgcmV3YXJkXG4gICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlZCAmJiAhcXVlc3QuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUXVlc3QgJHtxdWVzdC50aXRsZX0gY29tcGxldGVkISBSZXdhcmQ6ICR7cXVlc3QucmV3YXJkfSBYUGApO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgd2hlcmUgdGhlIGV4dHJhIFhQIGlzIGNvbWluZyBmcm9tIC0gYXV0b21hdGljIHF1ZXN0IHJld2FyZHNcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLmFkZFBvaW50cyhxdWVzdC5yZXdhcmQsIGdhbWVUeXBlKSwgMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucXVlc3QsXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IG5ld1Byb2dyZXNzLCAgLy8gVXNlIGV4YWN0IHNhbWUgWFAgdmFsdWUgYXMgdGhlIGdhbWUgdG90YWxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlZFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHF1ZXN0O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIFtnYW1lVHlwZV06IHtcbiAgICAgICAgICAgICAgICAuLi5nYW1lUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgcXVlc3RzOiB1cGRhdGVkUXVlc3RzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNhdmUgdG8gRmlyZWJhc2UgYWZ0ZXIgdXBkYXRpbmcgbG9jYWwgc3RhdGVcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLnNhdmVVc2VyUHJvZ3Jlc3MoKSwgMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNvbXBsZXRlUXVlc3Q6IChnYW1lVHlwZTogc3RyaW5nLCBxdWVzdElkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgIC8vIFNraXAgaWYgbm8gcHJvZ3Jlc3MgZGF0YSBmb3IgdGhpcyBnYW1lIHR5cGVcbiAgICAgICAgICBpZiAoIXN0YXRlLnByb2dyZXNzIHx8ICFzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV0pIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZXQgdGhlIHF1ZXN0cyBmb3IgdGhpcyBzcGVjaWZpYyBnYW1lIHR5cGVcbiAgICAgICAgICBjb25zdCBnYW1lUHJvZ3Jlc3MgPSBzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV07XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXBkYXRlIG9ubHkgdGhlIHN0cmVhay1ib251cyBxdWVzdCBmb3IgdGhpcyBnYW1lIHR5cGVcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUXVlc3RzID0gZ2FtZVByb2dyZXNzLnF1ZXN0cy5tYXAocXVlc3QgPT4ge1xuICAgICAgICAgICAgaWYgKHF1ZXN0LmlkID09PSBxdWVzdElkKSB7XG4gICAgICAgICAgICAgIC8vIEdpdmUgWFAgcmV3YXJkIGZvciBjb21wbGV0aW5nIHRoZSBxdWVzdFxuICAgICAgICAgICAgICBpZiAoIXF1ZXN0LmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBnZXQoKS5hZGRQb2ludHMocXVlc3QucmV3YXJkLCBnYW1lVHlwZSksIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnF1ZXN0LFxuICAgICAgICAgICAgICAgIHByb2dyZXNzOiBxdWVzdC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBxdWVzdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDcmVhdGUgdGhlIHVwZGF0ZWQgcHJvZ3Jlc3MgZm9yIGp1c3QgdGhpcyBnYW1lIHR5cGVcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5wcm9ncmVzcyxcbiAgICAgICAgICAgIFtnYW1lVHlwZV06IHtcbiAgICAgICAgICAgICAgLi4uZ2FtZVByb2dyZXNzLFxuICAgICAgICAgICAgICBxdWVzdHM6IHVwZGF0ZWRRdWVzdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNhdmUgdG8gRmlyZWJhc2UgYWZ0ZXIgdXBkYXRpbmdcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdldCgpLnNhdmVVc2VyUHJvZ3Jlc3MoKSwgMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHsgcHJvZ3Jlc3M6IHVwZGF0ZWRQcm9ncmVzcyB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNoZWNrQW5kUmVmcmVzaFF1ZXN0czogKGdhbWVUeXBlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGdhbWVQcm9ncmVzcyA9IHN0YXRlLnByb2dyZXNzW2dhbWVUeXBlXTtcbiAgICAgICAgICBpZiAoIWdhbWVQcm9ncmVzcykgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHRvZGF5ID0gZ2V0VG9kYXlEYXRlU3RyaW5nKCk7XG4gICAgICAgICAgbGV0IHF1ZXN0c05lZWRSZXNldCA9IGZhbHNlO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGlmIGFueSBxdWVzdHMgaGF2ZSBleHBpcmVkXG4gICAgICAgICAgaWYgKGdhbWVQcm9ncmVzcy5xdWVzdHMgJiYgQXJyYXkuaXNBcnJheShnYW1lUHJvZ3Jlc3MucXVlc3RzKSkge1xuICAgICAgICAgICAgZ2FtZVByb2dyZXNzLnF1ZXN0cy5mb3JFYWNoKHF1ZXN0ID0+IHtcbiAgICAgICAgICAgICAgLy8gQ29tcGFyZSBkYXRlcyBpbiBZWVlZLU1NLUREIGZvcm1hdCAobG9jYWwgdGltZSlcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGV4cGlyYXRpb24gZGF0ZSBpcyB0b2RheSBvciBlYXJsaWVyLCB0aGUgcXVlc3QgaGFzIGV4cGlyZWRcbiAgICAgICAgICAgICAgaWYgKHF1ZXN0LmV4cGlyZXNBdCA8PSB0b2RheSkge1xuICAgICAgICAgICAgICAgIHF1ZXN0c05lZWRSZXNldCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBxdWVzdHMgYXJyYXkgZG9lc24ndCBleGlzdCBvciBpcyBub3QgYW4gYXJyYXksIHdlIG5lZWQgdG8gcmVzZXRcbiAgICAgICAgICAgIHF1ZXN0c05lZWRSZXNldCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIElmIHF1ZXN0cyBuZWVkIHRvIGJlIHJlc2V0LCBnZW5lcmF0ZSBuZXcgb25lc1xuICAgICAgICAgIGlmIChxdWVzdHNOZWVkUmVzZXQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZXNldHRpbmcgcXVlc3RzIGZvciAke2dhbWVUeXBlfSBhcyB0aGV5IGhhdmUgZXhwaXJlZGApO1xuICAgICAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgW2dhbWVUeXBlXToge1xuICAgICAgICAgICAgICAgICAgLi4uZ2FtZVByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgcXVlc3RzOiBnZW5lcmF0ZURhaWx5UXVlc3RzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNhdmUgdG8gRmlyZWJhc2UgYWZ0ZXIgdXBkYXRpbmcgbG9jYWwgc3RhdGVcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZ2V0KCkuc2F2ZVVzZXJQcm9ncmVzcygpLCAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgcmVzZXRRdWVzdHM6IChnYW1lVHlwZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCBnYW1lUHJvZ3Jlc3MgPSBzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV07XG4gICAgICAgICAgaWYgKCFnYW1lUHJvZ3Jlc3MpIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZW5lcmF0ZSBmcmVzaCBxdWVzdHNcbiAgICAgICAgICBjb25zdCBmcmVzaFF1ZXN0cyA9IGdlbmVyYXRlRGFpbHlRdWVzdHMoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLnByb2dyZXNzLFxuICAgICAgICAgICAgICBbZ2FtZVR5cGVdOiB7XG4gICAgICAgICAgICAgICAgLi4uZ2FtZVByb2dyZXNzLFxuICAgICAgICAgICAgICAgIHF1ZXN0czogZnJlc2hRdWVzdHNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU2F2ZSB0byBGaXJlYmFzZSBhZnRlciB1cGRhdGluZyBsb2NhbCBzdGF0ZVxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZ2V0KCkuc2F2ZVVzZXJQcm9ncmVzcygpLCAwKTtcbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgY29tcGxldGVTdHJlYWtCb251c1F1ZXN0OiAoZ2FtZVR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgLy8gU2tpcCBpZiBubyBwcm9ncmVzcyBkYXRhIGZvciB0aGlzIGdhbWUgdHlwZVxuICAgICAgICAgIGlmICghc3RhdGUucHJvZ3Jlc3MgfHwgIXN0YXRlLnByb2dyZXNzW2dhbWVUeXBlXSkgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdldCB0aGUgcXVlc3RzIGZvciB0aGlzIHNwZWNpZmljIGdhbWUgdHlwZVxuICAgICAgICAgIGNvbnN0IGdhbWVQcm9ncmVzcyA9IHN0YXRlLnByb2dyZXNzW2dhbWVUeXBlXTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgb25seSB0aGUgc3RyZWFrLWJvbnVzIHF1ZXN0IGZvciB0aGlzIGdhbWUgdHlwZVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRRdWVzdHMgPSBnYW1lUHJvZ3Jlc3MucXVlc3RzLm1hcChxdWVzdCA9PiB7XG4gICAgICAgICAgICBpZiAocXVlc3QuaWQgPT09ICdzdHJlYWstYm9udXMnICYmICFxdWVzdC5pc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnF1ZXN0LFxuICAgICAgICAgICAgICAgIHByb2dyZXNzOiAxLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkOiB0cnVlXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcXVlc3Q7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIHRoZSB1cGRhdGVkIHByb2dyZXNzIGZvciBqdXN0IHRoaXMgZ2FtZSB0eXBlXG4gICAgICAgICAgY29uc3QgdXBkYXRlZFByb2dyZXNzID0ge1xuICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICBbZ2FtZVR5cGVdOiB7XG4gICAgICAgICAgICAgIC4uLmdhbWVQcm9ncmVzcyxcbiAgICAgICAgICAgICAgcXVlc3RzOiB1cGRhdGVkUXVlc3RzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTYXZlIHRvIEZpcmViYXNlIGFmdGVyIHVwZGF0aW5nXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBnZXQoKS5zYXZlVXNlclByb2dyZXNzKCksIDApO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiB7IHByb2dyZXNzOiB1cGRhdGVkUHJvZ3Jlc3MgfTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBDaGFsbGVuZ2UgdHJhY2tpbmdcbiAgICAgIGFkZENoYWxsZW5nZVJlc3VsdDogKHJlc3VsdDogQ2hhbGxlbmdlUmVzdWx0KSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCBuZXdDaGFsbGVuZ2VzID0gWy4uLnN0YXRlLnJlY2VudENoYWxsZW5nZXMsIHJlc3VsdF07XG4gICAgICAgICAgLy8gQ2FwIGF0IDUwIGNoYWxsZW5nZXMgdG8gcHJldmVudCBkb2N1bWVudCBzaXplIGlzc3Vlc1xuICAgICAgICAgIGNvbnN0IGNhcHBlZENoYWxsZW5nZXMgPSBuZXdDaGFsbGVuZ2VzLnNsaWNlKC01MCk7XG4gICAgICAgICAgcmV0dXJuIHsgcmVjZW50Q2hhbGxlbmdlczogY2FwcGVkQ2hhbGxlbmdlcyB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIHN0cmVhayBzaG91bGQgYmUgcmVzZXRcbiAgICAgIGNoZWNrU3RyZWFrUmVzZXQ6ICgpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbU3RyZWFrQ2hlY2tdIEN1cnJlbnQgc3RhdGU6JywgeyBcbiAgICAgICAgICAgIHN0cmVhazogc3RhdGUuc3RyZWFrLCBcbiAgICAgICAgICAgIGxhc3RTdHJlYWtEYXRlOiBzdGF0ZS5sYXN0U3RyZWFrRGF0ZSwgXG4gICAgICAgICAgICBzdHJlYWtTdGF0ZTogc3RhdGUuc3RyZWFrU3RhdGUgXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBsYXN0IHN0cmVhayBkYXRlLCBubyBuZWVkIHRvIGNoZWNrXG4gICAgICAgICAgaWYgKCFzdGF0ZS5sYXN0U3RyZWFrRGF0ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTdHJlYWtDaGVja10gTm8gbGFzdCBzdHJlYWsgZGF0ZSwgc2V0dGluZyB0byBub25lJyk7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RyZWFrU3RhdGU6ICdub25lJyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB0b2RheSA9IGdldFRvZGF5RGF0ZVN0cmluZygpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIElmIHRoZXkgYWxyZWFkeSBwbGF5ZWQgdG9kYXksIHN0cmVhayBpcyBhY3RpdmVcbiAgICAgICAgICBpZiAoaXNTYW1lRGF5KHN0YXRlLmxhc3RTdHJlYWtEYXRlLCB0b2RheSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbU3RyZWFrQ2hlY2tdIFBsYXllZCB0b2RheSwga2VlcGluZyBzdHJlYWsgYWN0aXZlJyk7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RyZWFrU3RhdGU6ICdhY3RpdmUnIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIElmIHRoZXkgbGFzdCBwbGF5ZWQgeWVzdGVyZGF5LCBzdHJlYWsgaXMgdmFsaWQgYnV0IGluYWN0aXZlXG4gICAgICAgICAgaWYgKGlzQ29uc2VjdXRpdmVEYXkoc3RhdGUubGFzdFN0cmVha0RhdGUsIHRvZGF5KSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTdHJlYWtDaGVja10gUGxheWVkIHllc3RlcmRheSwgc3RyZWFrIGluYWN0aXZlIGJ1dCB2YWxpZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0cmVha1N0YXRlOiAnaW5hY3RpdmUnIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIElmIGl0J3MgYmVlbiBtb3JlIHRoYW4gYSBkYXkgc2luY2UgbGFzdCBwbGF5LCByZXNldCBzdHJlYWtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1N0cmVha0NoZWNrXSBSZXNldHRpbmcgc3RyZWFrIGR1ZSB0byBpbmFjdGl2aXR5Jyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgc3RyZWFrOiAwLFxuICAgICAgICAgICAgc3RyZWFrU3RhdGU6ICdub25lJyxcbiAgICAgICAgICAgIC8vIERvbid0IHVwZGF0ZSBsYXN0U3RyZWFrRGF0ZSBzbyB0aGV5IGNhbiBzdGlsbCBzdGFydCBhIG5ldyBzdHJlYWsgdG9kYXlcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNoZWNrU3RyZWFrU3RhdHVzOiAoKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCB0b2RheSA9IGdldFRvZGF5RGF0ZVN0cmluZygpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIElmIG5vIHN0cmVhaywgc3RhdHVzIGlzIFwibm9uZVwiXG4gICAgICAgICAgaWYgKHN0YXRlLnN0cmVhayA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0cmVha1N0YXRlOiAnbm9uZScgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSWYgcGxheWVkIHRvZGF5LCBzdHJlYWsgaXMgYWN0aXZlXG4gICAgICAgICAgaWYgKGlzU2FtZURheShzdGF0ZS5sYXN0U3RyZWFrRGF0ZSwgdG9kYXkpKSB7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RyZWFrU3RhdGU6ICdhY3RpdmUnIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgc3RyZWFrIGV4aXN0cyBidXQgaXMgaW5hY3RpdmVcbiAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RyZWFrU3RhdGU6ICdpbmFjdGl2ZScgfTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBDb21wbGV0ZSBhIGdhbWUgYW5kIGhhbmRsZSBzdHJlYWsvWFAgdHJhY2tpbmdcbiAgICAgIGNvbXBsZXRlR2FtZTogKGdhbWVUeXBlLCBzY29yZSwgaXNDb3JyZWN0KSA9PiBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgIGlmICghZ2FtZVR5cGUpIHJldHVybiBzdGF0ZTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBbR2FtZURCXSBDb21wbGV0aW5nIGdhbWU6ICR7Z2FtZVR5cGV9LCBTY29yZTogJHtzY29yZX0sIENvcnJlY3Q6ICR7aXNDb3JyZWN0fWApO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBsYXN0IHBsYXllZCB0aW1lc3RhbXBcbiAgICAgICAgY29uc3QgZ2FtZVByb2dyZXNzID0gc3RhdGUucHJvZ3Jlc3NbZ2FtZVR5cGVdIHx8IHtcbiAgICAgICAgICBzZWN0aW9uczogZ2VuZXJhdGVTZWN0aW9ucygpLFxuICAgICAgICAgIHhwOiAwLFxuICAgICAgICAgIHF1ZXN0czogZ2VuZXJhdGVEYWlseVF1ZXN0cygpLFxuICAgICAgICAgIGN1cnJlbnRTZWN0aW9uOiAwLFxuICAgICAgICAgIGN1cnJlbnRMZXZlbDogMCxcbiAgICAgICAgICBjb21wbGV0ZWRMZXZlbHM6IFtdLFxuICAgICAgICAgIGxhc3RQbGF5ZWRBdDogJydcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSB1cGRhdGVkIGdhbWUgcHJvZ3Jlc3Mgd2l0aCB0aW1lc3RhbXBcbiAgICAgICAgY29uc3QgdXBkYXRlZEdhbWVQcm9ncmVzcyA9IHtcbiAgICAgICAgICAuLi5nYW1lUHJvZ3Jlc3MsXG4gICAgICAgICAgbGFzdFBsYXllZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBzdHJlYWsgaGFuZGxpbmcgLSBJTVBPUlRBTlQ6IHN0cmVhayBpcyBub3QgcmVzZXQgb24gd3JvbmcgYW5zd2Vyc1xuICAgICAgICAvLyBJdCBvbmx5IHVwZGF0ZXMgKGluY3JlYXNlcykgd2hlbiBpdCdzIHRoZSBmaXJzdCBjb3JyZWN0IGFuc3dlciBvZiBhIG5ldyBkYXlcbiAgICAgICAgY29uc3QgdG9kYXkgPSBnZXRUb2RheURhdGVTdHJpbmcoKTtcbiAgICAgICAgY29uc3Qgc3RyZWFrVXBkYXRlczogUGFydGlhbDxHYW1lU3RhdGU+ID0ge307XG4gICAgICAgIFxuICAgICAgICAvLyBPbmx5IGNvbnNpZGVyIHN0cmVhayB1cGRhdGVzIGZvciBjb3JyZWN0IGFuc3dlcnNcbiAgICAgICAgaWYgKGlzQ29ycmVjdCkge1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0U3RyZWFrRGF0ZSAhPT0gdG9kYXkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGNvcnJlY3QgYW5zd2VyIG9mIGEgbmV3IGRheSAtIGluY3JlYXNlIHN0cmVha1xuICAgICAgICAgICAgc3RyZWFrVXBkYXRlcy5zdHJlYWsgPSBzdGF0ZS5zdHJlYWsgKyAxO1xuICAgICAgICAgICAgc3RyZWFrVXBkYXRlcy5sYXN0U3RyZWFrRGF0ZSA9IHRvZGF5O1xuICAgICAgICAgICAgc3RyZWFrVXBkYXRlcy5zdHJlYWtTdGF0ZSA9ICdhY3RpdmUnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0dhbWVEQl0gSW5jcmVhc2luZyBzdHJlYWsgdG8gJHtzdHJlYWtVcGRhdGVzLnN0cmVha30gKGZpcnN0IGNvcnJlY3QgYW5zd2VyIHRvZGF5KWApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IHBsYXllZCB0b2RheSBhbmQgZ290IHNvbWV0aGluZyBjb3JyZWN0IC0gc3RyZWFrIHJlbWFpbnMgYWN0aXZlXG4gICAgICAgICAgICBzdHJlYWtVcGRhdGVzLnN0cmVha1N0YXRlID0gJ2FjdGl2ZSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgYWNoaWV2ZW1lbnRzIC0gdHJhY2sgZWFjaCBnYW1lIHR5cGUgc2VwYXJhdGVseVxuICAgICAgICBsZXQgYWNoaWV2ZW1lbnRzID0gWy4uLihzdGF0ZS5hY2hpZXZlbWVudHMgfHwgW10pXTtcbiAgICAgICAgbGV0IGdhbWVUeXBlQWNoaWV2ZW1lbnRzID0gWy4uLihzdGF0ZS5nYW1lQWNoaWV2ZW1lbnRzW2dhbWVUeXBlXSB8fCBbXSldO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIFwiRmlyc3QgU3RlcHNcIiBhY2hpZXZlbWVudCAtIGNvbXBsZXRpbmcgYW55IGdhbWVcbiAgICAgICAgaWYgKCFnYW1lVHlwZUFjaGlldmVtZW50cy5pbmNsdWRlcygnZmlyc3Qtc3RlcHMnKSkge1xuICAgICAgICAgIC8vIEFkZCB0byBnYW1lLXNwZWNpZmljIGFjaGlldmVtZW50c1xuICAgICAgICAgIGdhbWVUeXBlQWNoaWV2ZW1lbnRzLnB1c2goJ2ZpcnN0LXN0ZXBzJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWxzbyBhZGQgdG8gZ2xvYmFsIGFjaGlldmVtZW50cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgIGlmICghYWNoaWV2ZW1lbnRzLmluY2x1ZGVzKCdmaXJzdC1zdGVwcycpKSB7XG4gICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCgnZmlyc3Qtc3RlcHMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coYFtBY2hpZXZlbWVudF0gVW5sb2NrZWQ6IEZpcnN0IFN0ZXBzIGluICR7Z2FtZVR5cGV9IC0gQ29tcGxldGVkIHlvdXIgZmlyc3QgZ2FtZSFgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIFwiUGVyZmVjdCBTY29yZVwiIGFjaGlldmVtZW50IC0gc2NvcmUgbXVzdCBiZSBhdCBsZWFzdCAxMDAgKGluY2x1ZGluZyBib251c2VzKVxuICAgICAgICBpZiAoc2NvcmUgPj0gMTAwICYmICFnYW1lVHlwZUFjaGlldmVtZW50cy5pbmNsdWRlcygncGVyZmVjdC1zY29yZScpKSB7XG4gICAgICAgICAgLy8gQWRkIHRvIGdhbWUtc3BlY2lmaWMgYWNoaWV2ZW1lbnRzXG4gICAgICAgICAgZ2FtZVR5cGVBY2hpZXZlbWVudHMucHVzaCgncGVyZmVjdC1zY29yZScpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEFsc28gYWRkIHRvIGdsb2JhbCBhY2hpZXZlbWVudHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICBpZiAoIWFjaGlldmVtZW50cy5pbmNsdWRlcygncGVyZmVjdC1zY29yZScpKSB7XG4gICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCgncGVyZmVjdC1zY29yZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0FjaGlldmVtZW50XSBVbmxvY2tlZDogUGVyZmVjdCBTY29yZSBpbiAke2dhbWVUeXBlfSAtIFNjb3JlZCAxMDAlIG9yIGhpZ2hlciFgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIFwiU3RyZWFrIE1hc3RlclwiIGFjaGlldmVtZW50IC0gbWFpbnRhaW4gYSA3LWRheSBzdHJlYWtcbiAgICAgICAgLy8gTm90ZTogU3RyZWFrIE1hc3RlciBpcyBhIGdsb2JhbCBhY2hpZXZlbWVudCwgbm90IGdhbWUtc3BlY2lmaWNcbiAgICAgICAgaWYgKHN0cmVha1VwZGF0ZXMuc3RyZWFrICE9PSB1bmRlZmluZWQgJiYgc3RyZWFrVXBkYXRlcy5zdHJlYWsgPj0gNyAmJiAhYWNoaWV2ZW1lbnRzLmluY2x1ZGVzKCdzdHJlYWstbWFzdGVyJykpIHtcbiAgICAgICAgICAvLyBBZGQgZGlyZWN0bHkgdG8gZ2xvYmFsIGFjaGlldmVtZW50c1xuICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKCdzdHJlYWstbWFzdGVyJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQnV0IGFsc28gYWRkIHRvIGdhbWUtc3BlY2lmaWMgYWNoaWV2ZW1lbnRzIGZvciB0aGUgY3VycmVudCBnYW1lIHR5cGVcbiAgICAgICAgICBpZiAoIWdhbWVUeXBlQWNoaWV2ZW1lbnRzLmluY2x1ZGVzKCdzdHJlYWstbWFzdGVyJykpIHtcbiAgICAgICAgICAgIGdhbWVUeXBlQWNoaWV2ZW1lbnRzLnB1c2goJ3N0cmVhay1tYXN0ZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tBY2hpZXZlbWVudF0gVW5sb2NrZWQ6IFN0cmVhayBNYXN0ZXIgLSBNYWludGFpbmVkIGEgNy1kYXkgc3RyZWFrIScpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBQcmVwYXJlIHVwZGF0ZWQgZ2FtZUFjaGlldmVtZW50cyBvYmplY3RcbiAgICAgICAgY29uc3QgdXBkYXRlZEdhbWVBY2hpZXZlbWVudHMgPSB7XG4gICAgICAgICAgLi4uc3RhdGUuZ2FtZUFjaGlldmVtZW50cyxcbiAgICAgICAgICBbZ2FtZVR5cGVdOiBnYW1lVHlwZUFjaGlldmVtZW50c1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHByb2dyZXNzIHdpdGggdGhlIGdhbWUgcHJvZ3Jlc3NcbiAgICAgICAgY29uc3QgdXBkYXRlZFByb2dyZXNzID0ge1xuICAgICAgICAgIC4uLnN0YXRlLnByb2dyZXNzLFxuICAgICAgICAgIFtnYW1lVHlwZV06IHVwZGF0ZWRHYW1lUHJvZ3Jlc3NcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBhIGNoYWxsZW5nZSByZXN1bHQgcmVjb3JkXG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZVJlc3VsdDogQ2hhbGxlbmdlUmVzdWx0ID0ge1xuICAgICAgICAgIGlkOiBgJHtnYW1lVHlwZX0tJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgY2hhbGxlbmdlVHlwZTogZ2FtZVR5cGUgYXMgJ21ha2Utc2VudGVuY2UnIHwgJ211bHRpcGxlLWNob2ljZScgfCAnY29udmVyc2F0aW9uJyxcbiAgICAgICAgICBzY29yZSxcbiAgICAgICAgICBtYXhTY29yZTogMTAwLFxuICAgICAgICAgIGNvbXBsZXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgZHVyYXRpb246IDAsIC8vIFRPRE86IFRyYWNrIGFjdHVhbCBkdXJhdGlvblxuICAgICAgICAgIGlzQ29ycmVjdCxcbiAgICAgICAgICBnYW1lVHlwZVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHRvIHJlY2VudCBjaGFsbGVuZ2VzXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRSZWNlbnRDaGFsbGVuZ2VzID0gWy4uLnN0YXRlLnJlY2VudENoYWxsZW5nZXMsIGNoYWxsZW5nZVJlc3VsdF07XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgdGhlIGZpbmFsIHN0YXRlIHVwZGF0ZXNcbiAgICAgICAgY29uc3QgZ2FtZVVwZGF0ZXMgPSB7XG4gICAgICAgICAgcHJvZ3Jlc3M6IHVwZGF0ZWRQcm9ncmVzcyxcbiAgICAgICAgICBhY2hpZXZlbWVudHMsIC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgZ2FtZUFjaGlldmVtZW50czogdXBkYXRlZEdhbWVBY2hpZXZlbWVudHMsXG4gICAgICAgICAgdG90YWxDaGFsbGVuZ2VzQ29tcGxldGVkOiBzdGF0ZS50b3RhbENoYWxsZW5nZXNDb21wbGV0ZWQgKyAxLFxuICAgICAgICAgIHJlY2VudENoYWxsZW5nZXM6IHVwZGF0ZWRSZWNlbnRDaGFsbGVuZ2VzLFxuICAgICAgICAgIC4uLnN0cmVha1VwZGF0ZXNcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNhdmUgdG8gZGF0YWJhc2VcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBnZXQoKS5zYXZlVXNlclByb2dyZXNzKCksIDApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGdhbWVVcGRhdGVzO1xuICAgICAgfSksXG4gICAgICBcbiAgICAgIC8vIFNhdmUgdXNlciBwcm9ncmVzcyB0byBkYXRhYmFzZSAtIGRpc2FibGVkIHRvIGF2b2lkIGNvbmZsaWN0cyB3aXRoIHVzZUdhbWVQcm9ncmVzc1xuICAgICAgLy8gQWxsIHdyaXRlcyBzaG91bGQgZ28gdGhyb3VnaCBzcmMvaG9va3MvdXNlR2FtZVByb2dyZXNzLnRzIGZvciBhIHNpbmdsZSBzb3VyY2Ugb2YgdHJ1dGhcbiAgICAgIHNhdmVVc2VyUHJvZ3Jlc3M6IGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gTm8tb3A6IHByZXZlbnQgb3ZlcndyaXRpbmcgWFAgYW5kIHF1ZXN0cyB3cml0dGVuIGJ5IHVzZUdhbWVQcm9ncmVzc1xuICAgICAgICByZXR1cm47XG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBVc2VyLXNwZWNpZmljIHByb2dyZXNzXG4gICAgICBsb2FkVXNlclByb2dyZXNzOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0F1dGhdIE5vIGF1dGhlbnRpY2F0ZWQgdXNlciBmb3VuZCB3aGVuIHRyeWluZyB0byBsb2FkIHByb2dyZXNzJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBbQXV0aF0gTG9hZGluZyBwcm9ncmVzcyBmb3IgdXNlcjogJHt1c2VyLnVpZH1gKTtcbiAgICAgICAgICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsIEdBTUVfUFJPR1JFU1NfQ09MTEVDVElPTiwgdXNlci51aWQpO1xuICAgICAgICAgIGNvbnN0IHVzZXJQcm9ncmVzc0RvYyA9IGF3YWl0IGdldERvYyh1c2VyUHJvZ3Jlc3NSZWYpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICh1c2VyUHJvZ3Jlc3NEb2MuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB1c2VyUHJvZ3Jlc3NEb2MuZGF0YSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXQoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIHByb2ZpbGU6IGRhdGEucHJvZmlsZSB8fCBudWxsLFxuICAgICAgICAgICAgICBzY29yZTogZGF0YS5zY29yZSB8fCAwLFxuICAgICAgICAgICAgICBzdHJlYWs6IGRhdGEuc3RyZWFrIHx8IDAsXG4gICAgICAgICAgICAgIGxhc3RTdHJlYWtEYXRlOiBkYXRhLmxhc3RTdHJlYWtEYXRlIHx8ICcnLFxuICAgICAgICAgICAgICBzdHJlYWtTdGF0ZTogZGF0YS5zdHJlYWtTdGF0ZSB8fCAnbm9uZScsXG4gICAgICAgICAgICAgIHRvdGFsQ2hhbGxlbmdlc0NvbXBsZXRlZDogZGF0YS50b3RhbENoYWxsZW5nZXNDb21wbGV0ZWQgfHwgMCxcbiAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzOiBkYXRhLmFjaGlldmVtZW50cyB8fCBbXSxcbiAgICAgICAgICAgICAgZ2FtZUFjaGlldmVtZW50czogZGF0YS5nYW1lQWNoaWV2ZW1lbnRzIHx8IHt9LFxuICAgICAgICAgICAgICByZWNlbnRDaGFsbGVuZ2VzOiBkYXRhLnJlY2VudENoYWxsZW5nZXMgfHwgW10sXG4gICAgICAgICAgICAgIHByb2dyZXNzOiBkYXRhLnByb2dyZXNzIHx8IHt9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQXV0aF0gU3VjY2Vzc2Z1bGx5IGxvYWRlZCB1c2VyIHByb2dyZXNzIGZyb20gRmlyZXN0b3JlJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQXV0aF0gTm8gc2F2ZWQgcHJvZ3Jlc3MgZm91bmQgZm9yIHVzZXIuIEluaXRpYWxpemluZyBuZXcgcHJvZ3Jlc3MuJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbml0aWFsIGdhbWUgcHJvZ3Jlc3Mgc3RydWN0dXJlXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsUHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICAgICdtYWtlLXNlbnRlbmNlJzoge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zOiBnZW5lcmF0ZVNlY3Rpb25zKCksXG4gICAgICAgICAgICAgICAgeHA6IDAsXG4gICAgICAgICAgICAgICAgcXVlc3RzOiBnZW5lcmF0ZURhaWx5UXVlc3RzKCksXG4gICAgICAgICAgICAgICAgY3VycmVudFNlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExldmVsOiAwLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZExldmVsczogW11cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ211bHRpcGxlLWNob2ljZSc6IHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uczogZ2VuZXJhdGVTZWN0aW9ucygpLFxuICAgICAgICAgICAgICAgIHhwOiAwLFxuICAgICAgICAgICAgICAgIHF1ZXN0czogZ2VuZXJhdGVEYWlseVF1ZXN0cygpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbDogMCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWRMZXZlbHM6IFtdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpcnN0LCB1bmxvY2sgdGhlIGZpcnN0IGxldmVsIG9mIGVhY2ggZ2FtZSB0eXBlXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdhbWVUeXBlIG9mIE9iamVjdC5rZXlzKGluaXRpYWxQcm9ncmVzcykpIHtcbiAgICAgICAgICAgICAgaWYgKGluaXRpYWxQcm9ncmVzc1tnYW1lVHlwZV0uc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGluaXRpYWxQcm9ncmVzc1tnYW1lVHlwZV0uc2VjdGlvbnNbMF0uaXNMb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFByb2dyZXNzW2dhbWVUeXBlXS5zZWN0aW9uc1swXS5sZXZlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgaW5pdGlhbFByb2dyZXNzW2dhbWVUeXBlXS5zZWN0aW9uc1swXS5sZXZlbHNbMF0uaXNMb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXRlIGluaXRpYWwgdXNlciBwcm9maWxlXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsUHJvZmlsZTogVXNlclByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiB1c2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgcGhvdG9VUkw6IHVzZXIucGhvdG9VUkwsXG4gICAgICAgICAgICAgIGpvaW5EYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgIGxhc3RBY3RpdmVEYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgIGdyYWRlTGV2ZWw6IG51bGwsXG4gICAgICAgICAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICAgICAgZW1haWxOb3RpZmljYXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYWlseVJlbWluZGVyOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbml0aWFsIHN0YXRlIHRvIHVwZGF0ZSBsb2NhbGx5XG4gICAgICAgICAgICBjb25zdCBuZXdVc2VyRGF0YSA9IHtcbiAgICAgICAgICAgICAgcHJvZmlsZTogaW5pdGlhbFByb2ZpbGUsXG4gICAgICAgICAgICAgIHNjb3JlOiAwLFxuICAgICAgICAgICAgICBzdHJlYWs6IDAsXG4gICAgICAgICAgICAgIGxhc3RTdHJlYWtEYXRlOiAnJyxcbiAgICAgICAgICAgICAgc3RyZWFrU3RhdGU6ICdub25lJyxcbiAgICAgICAgICAgICAgdG90YWxDaGFsbGVuZ2VzQ29tcGxldGVkOiAwLFxuICAgICAgICAgICAgICBhY2hpZXZlbWVudHM6IFtdLFxuICAgICAgICAgICAgICBnYW1lQWNoaWV2ZW1lbnRzOiB7fSxcbiAgICAgICAgICAgICAgcmVjZW50Q2hhbGxlbmdlczogW10sXG4gICAgICAgICAgICAgIHByb2dyZXNzOiBpbml0aWFsUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdXNlcklkOiB1c2VyLnVpZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIGxvY2FsIHN0YXRlXG4gICAgICAgICAgICBzZXQoc3RhdGUgPT4gKHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIC4uLm5ld1VzZXJEYXRhXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElNUE9SVEFOVDogU2F2ZSB0aGUgaW5pdGlhbCBkYXRhIHRvIEZpcmVzdG9yZSBpbW1lZGlhdGVseVxuICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSB1c2VyIGhhcyBhIGdhbWVQcm9ncmVzcyBkb2N1bWVudCBmcm9tIHRoZSBzdGFydFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgc2V0RG9jKHVzZXJQcm9ncmVzc1JlZiwgbmV3VXNlckRhdGEpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0F1dGhdIFN1Y2Nlc3NmdWxseSBjcmVhdGVkIG5ldyB1c2VyIHByb2dyZXNzIGRvY3VtZW50IGluIEZpcmVzdG9yZScpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0F1dGhdIEVycm9yIGNyZWF0aW5nIGluaXRpYWwgcHJvZ3Jlc3MgZG9jdW1lbnQ6JywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDaGVjayBpZiBzdHJlYWsgc2hvdWxkIGJlIHJlc2V0IGFmdGVyIGxvYWRpbmcgZGF0YVxuICAgICAgICAgIGdldCgpLmNoZWNrU3RyZWFrUmVzZXQoKTtcbiAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbQXV0aF0gRXJyb3IgbG9hZGluZyB1c2VyIHByb2dyZXNzOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFxuICAgICAgLy8gRW5zdXJlIGdhbWUgcHJvZ3Jlc3MgZXhpc3RzIGZvciBhIGdpdmVuIGdhbWUgdHlwZVxuICAgICAgZW5zdXJlR2FtZVByb2dyZXNzRXhpc3RzOiAoZ2FtZVR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgaWYgKCFzdGF0ZS5wcm9ncmVzc1tnYW1lVHlwZV0pIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb2dyZXNzID0ge1xuICAgICAgICAgICAgICBzZWN0aW9uczogZ2VuZXJhdGVTZWN0aW9ucygpLFxuICAgICAgICAgICAgICB4cDogMCxcbiAgICAgICAgICAgICAgcXVlc3RzOiBnZW5lcmF0ZURhaWx5UXVlc3RzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uOiAwLFxuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWw6IDAsXG4gICAgICAgICAgICAgIGNvbXBsZXRlZExldmVsczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgW2dhbWVUeXBlXTogbmV3UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIC8vIFByb2ZpbGUgbWFuYWdlbWVudFxuICAgICAgdXBkYXRlVXNlclByb2ZpbGU6ICh1cGRhdGVzOiBQYXJ0aWFsPFVzZXJQcm9maWxlPikgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgIHByb2ZpbGU6IHtcbiAgICAgICAgICAgIC4uLnN0YXRlLnByb2ZpbGUsXG4gICAgICAgICAgICAuLi51cGRhdGVzXG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9LFxuICAgIH0pLFxuICAgIHtcbiAgICAgIG5hbWU6ICdnYW1lLXN0b3JhZ2UnLFxuICAgICAgLy8gRG9uJ3QgcGVyc2lzdCB1c2VyIHByb2dyZXNzIGZyb20gbG9jYWxTdG9yYWdlIHRvIGF2b2lkIGh5ZHJhdGlvbiBpc3N1ZXNcbiAgICAgIHBhcnRpYWxpemU6IChzdGF0ZSkgPT4gKHt9KSxcbiAgICAgIC8vIE9ubHkgZW5hYmxlIHN0b3JhZ2Ugb24gdGhlIGNsaWVudCBzaWRlXG4gICAgICBza2lwSHlkcmF0aW9uOiB0cnVlXG4gICAgfVxuICApXG4pOyJdLCJuYW1lcyI6WyJjcmVhdGUiLCJwZXJzaXN0IiwiZG9jIiwiZ2V0RG9jIiwic2V0RG9jIiwiZGIiLCJhdXRoIiwiZ2V0VG9kYXlEYXRlU3RyaW5nIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiaXNDb25zZWN1dGl2ZURheSIsInByZXZpb3VzRGF0ZSIsImN1cnJlbnREYXRlIiwicHJldiIsImN1cnIiLCJzZXRIb3VycyIsInRpbWVEaWZmIiwiZ2V0VGltZSIsImRheXNEaWZmIiwiTWF0aCIsInJvdW5kIiwiaXNTYW1lRGF5IiwiZGF0ZVN0cjEiLCJkYXRlU3RyMiIsImdldFRvbW9ycm93RGF0ZVN0cmluZyIsInRvbW9ycm93Iiwic2V0RGF0ZSIsImdldERhdGUiLCJnZW5lcmF0ZVNlY3Rpb25zIiwiY291bnQiLCJsZXZlbHNQZXJTZWN0aW9uIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwibWFwIiwiXyIsInNlY3Rpb25JbmRleCIsImlkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImlzTG9ja2VkIiwiaXNDb21wbGV0ZWQiLCJsZXZlbHMiLCJsZXZlbEluZGV4IiwiYmVzdFNjb3JlIiwiYXR0ZW1wdHMiLCJsYXN0UGxheWVkIiwiZ2VuZXJhdGVEYWlseVF1ZXN0cyIsImV4cGlyZXNBdCIsInJld2FyZCIsInByb2dyZXNzIiwidGFyZ2V0IiwiR0FNRV9QUk9HUkVTU19DT0xMRUNUSU9OIiwidXNlR2FtZVN0b3JlIiwic2V0IiwiZ2V0IiwicHJvZmlsZSIsInNjb3JlIiwic3RyZWFrIiwibGFzdFN0cmVha0RhdGUiLCJzdHJlYWtTdGF0ZSIsInRvdGFsQ2hhbGxlbmdlc0NvbXBsZXRlZCIsImFjaGlldmVtZW50cyIsImdhbWVBY2hpZXZlbWVudHMiLCJyZWNlbnRDaGFsbGVuZ2VzIiwiYWRkUG9pbnRzIiwicG9pbnRzIiwiZ2FtZVR5cGUiLCJzdGF0ZSIsImdhbWVQcm9ncmVzcyIsImNvbnNvbGUiLCJsb2ciLCJ4cCIsIm5ld1hQIiwibWF4IiwidXBkYXRlZEdhbWVQcm9ncmVzcyIsInVwZGF0ZWRRdWVzdHMiLCJxdWVzdHMiLCJuZXdTdGF0ZSIsInNldFRpbWVvdXQiLCJzYXZlVXNlclByb2dyZXNzIiwiaW5jcmVhc2VTdHJlYWsiLCJ0b2RheSIsIm5ld1N0cmVhayIsInJlc2V0U3RyZWFrIiwiaW5pdGlhbGl6ZUdhbWVQcm9ncmVzcyIsInNlY3Rpb25zIiwiY3VycmVudFNlY3Rpb24iLCJjdXJyZW50TGV2ZWwiLCJjb21wbGV0ZWRMZXZlbHMiLCJjb21wbGV0ZUxldmVsIiwic2VjdGlvbklkIiwibGV2ZWxJZCIsInVwZGF0ZWRTZWN0aW9ucyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInNlY3Rpb24iLCJsZXZlbCIsInVuZGVmaW5lZCIsImxldmVsS2V5IiwiZ2FtZVR5cGVBY2hpZXZlbWVudHMiLCJuZXh0U2VjdGlvbklkIiwibmV4dExldmVsSWQiLCJpc0xldmVsQ29tcGxldGVkIiwiaW5jbHVkZXMiLCJwdXNoIiwiaXNTZWN0aW9uQ29tcGxldGVkIiwiZXZlcnkiLCJsdmwiLCJxdWVzdCIsIm5ld1Byb2dyZXNzIiwibWluIiwidXBkYXRlZEdhbWVBY2hpZXZlbWVudHMiLCJjYW5BY2Nlc3NMZXZlbCIsImlzQXJyYXkiLCJ1bmxvY2tTZWN0aW9uIiwiYWRkUHJvZ3Jlc3NUb1F1ZXN0IiwicXVlc3RJZCIsImFtb3VudCIsImNvbXBsZXRlUXVlc3QiLCJ1cGRhdGVkUHJvZ3Jlc3MiLCJjaGVja0FuZFJlZnJlc2hRdWVzdHMiLCJxdWVzdHNOZWVkUmVzZXQiLCJmb3JFYWNoIiwicmVzZXRRdWVzdHMiLCJmcmVzaFF1ZXN0cyIsImNvbXBsZXRlU3RyZWFrQm9udXNRdWVzdCIsImFkZENoYWxsZW5nZVJlc3VsdCIsInJlc3VsdCIsIm5ld0NoYWxsZW5nZXMiLCJjYXBwZWRDaGFsbGVuZ2VzIiwic2xpY2UiLCJjaGVja1N0cmVha1Jlc2V0IiwiY2hlY2tTdHJlYWtTdGF0dXMiLCJjb21wbGV0ZUdhbWUiLCJpc0NvcnJlY3QiLCJsYXN0UGxheWVkQXQiLCJzdHJlYWtVcGRhdGVzIiwiY2hhbGxlbmdlUmVzdWx0Iiwibm93IiwiY2hhbGxlbmdlVHlwZSIsIm1heFNjb3JlIiwiY29tcGxldGVkQXQiLCJkdXJhdGlvbiIsInVwZGF0ZWRSZWNlbnRDaGFsbGVuZ2VzIiwiZ2FtZVVwZGF0ZXMiLCJsb2FkVXNlclByb2dyZXNzIiwidXNlciIsImN1cnJlbnRVc2VyIiwidWlkIiwidXNlclByb2dyZXNzUmVmIiwidXNlclByb2dyZXNzRG9jIiwiZXhpc3RzIiwiZGF0YSIsImluaXRpYWxQcm9ncmVzcyIsIk9iamVjdCIsImtleXMiLCJpbml0aWFsUHJvZmlsZSIsImRpc3BsYXlOYW1lIiwiZW1haWwiLCJwaG90b1VSTCIsImpvaW5EYXRlIiwibGFzdEFjdGl2ZURhdGUiLCJncmFkZUxldmVsIiwicHJlZmVyZW5jZXMiLCJlbWFpbE5vdGlmaWNhdGlvbnMiLCJkYWlseVJlbWluZGVyIiwibmV3VXNlckRhdGEiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJ1c2VySWQiLCJlcnJvciIsImVuc3VyZUdhbWVQcm9ncmVzc0V4aXN0cyIsInVwZGF0ZVVzZXJQcm9maWxlIiwidXBkYXRlcyIsIm5hbWUiLCJwYXJ0aWFsaXplIiwic2tpcEh5ZHJhdGlvbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/gameStore.ts\n"));

/***/ })

});